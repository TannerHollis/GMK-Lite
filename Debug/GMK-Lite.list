
GMK-Lite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008774  08008774  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800877c  0800877c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800877c  0800877c  0001877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08008784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e0  20000184  08008908  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  08008908  00020a64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016632  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003292  00000000  00000000  000367df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001050  00000000  00000000  00039a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  0003aac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001799e  00000000  00000000  0003b990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000104e9  00000000  00000000  0005332e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086acf  00000000  00000000  00063817  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea2e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000428c  00000000  00000000  000ea364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	08008704 	.word	0x08008704

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	08008704 	.word	0x08008704

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <Init_Joysticks>:
  * 		is assigned and default values are placed. The min/max ADC values are set at opposite
  * 		ends to assure the joystick's ADC bounds are calculated properly.
  * @param  None
  * @retval None
  */
void Init_Joysticks(){
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_OF_JOYSTICKS; i++){
 8000486:	2300      	movs	r3, #0
 8000488:	71fb      	strb	r3, [r7, #7]
 800048a:	e041      	b.n	8000510 <Init_Joysticks+0x90>
		joystick *J = &js[i];
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	222c      	movs	r2, #44	; 0x2c
 8000490:	fb02 f303 	mul.w	r3, r2, r3
 8000494:	4a22      	ldr	r2, [pc, #136]	; (8000520 <Init_Joysticks+0xa0>)
 8000496:	4413      	add	r3, r2
 8000498:	603b      	str	r3, [r7, #0]
		J->ADC_CH[0] = ADC_Channels[i*2];
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	4a21      	ldr	r2, [pc, #132]	; (8000524 <Init_Joysticks+0xa4>)
 80004a0:	5cd2      	ldrb	r2, [r2, r3]
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	701a      	strb	r2, [r3, #0]
		J->ADC_CH[1] = ADC_Channels[i*2+1];
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	3301      	adds	r3, #1
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <Init_Joysticks+0xa4>)
 80004ae:	5cd2      	ldrb	r2, [r2, r3]
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	705a      	strb	r2, [r3, #1]
		J->ADC_Value[0] = 2048;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004ba:	605a      	str	r2, [r3, #4]
		J->ADC_Value[1] = 2048;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004c2:	609a      	str	r2, [r3, #8]
		J->ADC_Neutral[0] = 0;
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
		J->ADC_Neutral[1] = 0;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
		J->ADC_count= 0;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	2200      	movs	r2, #0
 80004d4:	751a      	strb	r2, [r3, #20]
		J->ADC_calibrate = 0;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	2200      	movs	r2, #0
 80004da:	755a      	strb	r2, [r3, #21]
		J->ADC_new_flag = 0;
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	2200      	movs	r2, #0
 80004e0:	759a      	strb	r2, [r3, #22]
		J->ADC_min[0] = UINT32_MAX;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	f04f 32ff 	mov.w	r2, #4294967295
 80004e8:	619a      	str	r2, [r3, #24]
		J->ADC_min[1] = UINT32_MAX;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	f04f 32ff 	mov.w	r2, #4294967295
 80004f0:	61da      	str	r2, [r3, #28]
		J->ADC_max[0] = 0;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
		J->ADC_max[1] = 0;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
		J->x = 0;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	851a      	strh	r2, [r3, #40]	; 0x28
		J->y = 0;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	855a      	strh	r2, [r3, #42]	; 0x2a
	for (uint8_t i = 0; i < NUM_OF_JOYSTICKS; i++){
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	3301      	adds	r3, #1
 800050e:	71fb      	strb	r3, [r7, #7]
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0ba      	beq.n	800048c <Init_Joysticks+0xc>
	}
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	200001cc 	.word	0x200001cc
 8000524:	20000000 	.word	0x20000000

08000528 <Calibrate_Joysticks>:
  * 		Update_Values(), if the device that is being calibrated is flagged, ADC_calibrate, the
  * 		new value flag, ADC_new_flag, is set.
  * @param  None
  * @retval None
  */
void Calibrate_Joysticks(){
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_OF_JOYSTICKS; i++){
 800052e:	2300      	movs	r3, #0
 8000530:	73fb      	strb	r3, [r7, #15]
 8000532:	e03a      	b.n	80005aa <Calibrate_Joysticks+0x82>
		joystick *J = &js[i];
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	222c      	movs	r2, #44	; 0x2c
 8000538:	fb02 f303 	mul.w	r3, r2, r3
 800053c:	4a1f      	ldr	r2, [pc, #124]	; (80005bc <Calibrate_Joysticks+0x94>)
 800053e:	4413      	add	r3, r2
 8000540:	60bb      	str	r3, [r7, #8]
		J->ADC_calibrate = 1;
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	2201      	movs	r2, #1
 8000546:	755a      	strb	r2, [r3, #21]
		J->ADC_count = 0;
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	2200      	movs	r2, #0
 800054c:	751a      	strb	r2, [r3, #20]
		uint32_t sum[2] = {0, 0};
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
		while (J->ADC_count < CALIBRATE_ITERS){
 8000556:	e010      	b.n	800057a <Calibrate_Joysticks+0x52>
			if (J->ADC_new_flag){
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	7d9b      	ldrb	r3, [r3, #22]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d00c      	beq.n	800057a <Calibrate_Joysticks+0x52>
				sum[0] += J->ADC_Value[0];
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	4413      	add	r3, r2
 8000568:	603b      	str	r3, [r7, #0]
				sum[1] += J->ADC_Value[1];
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4413      	add	r3, r2
 8000572:	607b      	str	r3, [r7, #4]
				J->ADC_new_flag = 0;
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	2200      	movs	r2, #0
 8000578:	759a      	strb	r2, [r3, #22]
		while (J->ADC_count < CALIBRATE_ITERS){
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	7d1b      	ldrb	r3, [r3, #20]
 800057e:	2b63      	cmp	r3, #99	; 0x63
 8000580:	d9ea      	bls.n	8000558 <Calibrate_Joysticks+0x30>
			}
		}
		J->ADC_Neutral[0] = sum[0] / CALIBRATE_ITERS;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <Calibrate_Joysticks+0x98>)
 8000586:	fba2 2303 	umull	r2, r3, r2, r3
 800058a:	095a      	lsrs	r2, r3, #5
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	60da      	str	r2, [r3, #12]
		J->ADC_Neutral[1] = sum[1] / CALIBRATE_ITERS;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <Calibrate_Joysticks+0x98>)
 8000594:	fba2 2303 	umull	r2, r3, r2, r3
 8000598:	095a      	lsrs	r2, r3, #5
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	611a      	str	r2, [r3, #16]
		J->ADC_calibrate = 0;
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	2200      	movs	r2, #0
 80005a2:	755a      	strb	r2, [r3, #21]
	for (uint8_t i = 0; i < NUM_OF_JOYSTICKS; i++){
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	3301      	adds	r3, #1
 80005a8:	73fb      	strb	r3, [r7, #15]
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0c1      	beq.n	8000534 <Calibrate_Joysticks+0xc>
	}
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200001cc 	.word	0x200001cc
 80005c0:	51eb851f 	.word	0x51eb851f

080005c4 <Update_Bounds>:
  * @note	This function is crutial to the Joystick's calibration functionality as the min/max
  * 		determine how far the joystick is either in the negative or positive direction.
  * @param  Joystick pointer J
  * @retval None
  */
void Update_Bounds(joystick *J){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	if (J->ADC_Value[0] > J->ADC_max[0]){
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6a1b      	ldr	r3, [r3, #32]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d903      	bls.n	80005e0 <Update_Bounds+0x1c>
		J->ADC_max[0] = J->ADC_Value[0];
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	621a      	str	r2, [r3, #32]
	}
	if (J->ADC_Value[0] < J->ADC_min[0]){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d203      	bcs.n	80005f4 <Update_Bounds+0x30>
		J->ADC_min[0] = J->ADC_Value[0];
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	619a      	str	r2, [r3, #24]
	}
	if (J->ADC_Value[1] > J->ADC_max[1]){
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d903      	bls.n	8000608 <Update_Bounds+0x44>
		J->ADC_max[1] = J->ADC_Value[1];
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if (J->ADC_Value[1] < J->ADC_min[1]){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689a      	ldr	r2, [r3, #8]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	429a      	cmp	r2, r3
 8000612:	d203      	bcs.n	800061c <Update_Bounds+0x58>
		J->ADC_min[1] = J->ADC_Value[1];
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689a      	ldr	r2, [r3, #8]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	61da      	str	r2, [r3, #28]
	}
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
	...

08000628 <Map_Values>:
  * 		a 16-bit resolution, either a basic linear interpolation or a more complex mapping function
  * 		is used. See the function, map(), for an in depth example.
  * @param  Joystick pointer J
  * @retval None
  */
void Map_Values(joystick *J){
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af02      	add	r7, sp, #8
 800062e:	6078      	str	r0, [r7, #4]
	J->x = map(J->ADC_Value[0], J->ADC_min[0], J->ADC_max[0], INT16_MIN+4, INT16_MAX-3, J->ADC_Neutral[0]);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	4618      	mov	r0, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4619      	mov	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6a1b      	ldr	r3, [r3, #32]
 8000640:	461a      	mov	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	f647 73fc 	movw	r3, #32764	; 0x7ffc
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <Map_Values+0x7c>)
 8000650:	f000 f864 	bl	800071c <map>
 8000654:	4603      	mov	r3, r0
 8000656:	b21a      	sxth	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	851a      	strh	r2, [r3, #40]	; 0x28
	if (INVERT_X)
		J->x = -(J->x);
	J->y = map(J->ADC_Value[1], J->ADC_min[1], J->ADC_max[1], INT16_MIN+4, INT16_MAX-3, J->ADC_Neutral[1]);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4618      	mov	r0, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4619      	mov	r1, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	f647 73fc 	movw	r3, #32764	; 0x7ffc
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <Map_Values+0x7c>)
 800067c:	f000 f84e 	bl	800071c <map>
 8000680:	4603      	mov	r3, r0
 8000682:	b21a      	sxth	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	855a      	strh	r2, [r3, #42]	; 0x2a
	if (INVERT_Y)
		J->y = -(J->y);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800068e:	b29b      	uxth	r3, r3
 8000690:	425b      	negs	r3, r3
 8000692:	b29b      	uxth	r3, r3
 8000694:	b21a      	sxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	ffff8004 	.word	0xffff8004

080006a8 <Update_Values>:
  * 		for calibration. If so, it increments the ADC calibration counts, ADC_count, and flags
  * 		for a new conversion using the, ADC_new_flag, boolean variable.
  * @param  None
  * @retval None
  */
void Update_Values(){
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_OF_JOYSTICKS; i++){
 80006ae:	2300      	movs	r3, #0
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	e026      	b.n	8000702 <Update_Values+0x5a>
		joystick *J = &js[i];
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	222c      	movs	r2, #44	; 0x2c
 80006b8:	fb02 f303 	mul.w	r3, r2, r3
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <Update_Values+0x6c>)
 80006be:	4413      	add	r3, r2
 80006c0:	603b      	str	r3, [r7, #0]
		J->ADC_Value[0] = ADC_Buffer[ J->ADC_CH[0] ];
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <Update_Values+0x70>)
 80006ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	605a      	str	r2, [r3, #4]
		J->ADC_Value[1] = ADC_Buffer[ J->ADC_CH[1] ];
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <Update_Values+0x70>)
 80006da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	609a      	str	r2, [r3, #8]
		if (J->ADC_calibrate){
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	7d5b      	ldrb	r3, [r3, #21]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <Update_Values+0x54>
			J->ADC_count++;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	7d1b      	ldrb	r3, [r3, #20]
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	751a      	strb	r2, [r3, #20]
			J->ADC_new_flag = 1;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	2201      	movs	r2, #1
 80006fa:	759a      	strb	r2, [r3, #22]
	for (uint8_t i = 0; i < NUM_OF_JOYSTICKS; i++){
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	3301      	adds	r3, #1
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0d5      	beq.n	80006b4 <Update_Values+0xc>
		}
	}
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	200001cc 	.word	0x200001cc
 8000718:	200001a0 	.word	0x200001a0

0800071c <map>:
  * 		truncation of remainders as a byproduct of integer division. In order to avoid drift, the average of the
  * 		output bounds must be a whole number.
  * @param  int32_t x, int32_t x_min, int32_t x_max, int32_t y_min, int32_t y_max, int32_t neutral
  * @retval int32_t
  */
int32_t map(int32_t x, int32_t x_min, int32_t x_max, int32_t y_min, int32_t y_max, int32_t neutral){
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	603b      	str	r3, [r7, #0]
	if (x_max - x_min == 0){
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	429a      	cmp	r2, r3
 8000730:	d101      	bne.n	8000736 <map+0x1a>
		return(0);
 8000732:	2300      	movs	r3, #0
 8000734:	e04c      	b.n	80007d0 <map+0xb4>
	}
	else{
		int32_t diff_x = x_max - x_min;
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	61bb      	str	r3, [r7, #24]
		int32_t diff_y = y_max - y_min;
 800073e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	617b      	str	r3, [r7, #20]
		int32_t avg_y  = (y_max + y_min) / 2;
 8000746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	4413      	add	r3, r2
 800074c:	0fda      	lsrs	r2, r3, #31
 800074e:	4413      	add	r3, r2
 8000750:	105b      	asrs	r3, r3, #1
 8000752:	613b      	str	r3, [r7, #16]
		int32_t result;
		if(EN_CALIBRATE){
			if(absolute(x - neutral) < DEADZONE){
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f83c 	bl	80007d8 <absolute>
 8000760:	4603      	mov	r3, r0
 8000762:	2b13      	cmp	r3, #19
 8000764:	dc01      	bgt.n	800076a <map+0x4e>
				return(0);
 8000766:	2300      	movs	r3, #0
 8000768:	e032      	b.n	80007d0 <map+0xb4>
			}
			else
			{
				if(x - neutral > 0){
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	dd10      	ble.n	8000796 <map+0x7a>
					result = (x - neutral) * (y_max - avg_y) / (x_max - neutral) + avg_y;
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	1a8a      	subs	r2, r1, r2
 8000780:	fb02 f203 	mul.w	r2, r2, r3
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000788:	1acb      	subs	r3, r1, r3
 800078a:	fb92 f3f3 	sdiv	r3, r2, r3
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	4413      	add	r3, r2
 8000792:	61fb      	str	r3, [r7, #28]
 8000794:	e00f      	b.n	80007b6 <map+0x9a>
				}
				else{
					result = (x - neutral) * (avg_y - y_min) / (neutral - x_min) + avg_y;
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	6939      	ldr	r1, [r7, #16]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	1a8a      	subs	r2, r1, r2
 80007a2:	fb02 f203 	mul.w	r2, r2, r3
 80007a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1acb      	subs	r3, r1, r3
 80007ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	4413      	add	r3, r2
 80007b4:	61fb      	str	r3, [r7, #28]
		}
		else{
			result = (x - x_min) * (diff_y) / (diff_x) + y_min;
		}

		result = result < y_min ? y_min : result;
 80007b6:	69fa      	ldr	r2, [r7, #28]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	4293      	cmp	r3, r2
 80007bc:	bfb8      	it	lt
 80007be:	4613      	movlt	r3, r2
 80007c0:	61fb      	str	r3, [r7, #28]
		result = result > y_max ? y_max : result;
 80007c2:	69fa      	ldr	r2, [r7, #28]
 80007c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c6:	4293      	cmp	r3, r2
 80007c8:	bfa8      	it	ge
 80007ca:	4613      	movge	r3, r2
 80007cc:	61fb      	str	r3, [r7, #28]
		return(result);
 80007ce:	69fb      	ldr	r3, [r7, #28]
	}
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <absolute>:
  * @brief  Absolute Value
  *
  * @param  int32_t value
  * @retval int32_t
  */
int32_t absolute(int32_t value){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	return (value < 0 ? -value : value);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bfb8      	it	lt
 80007e6:	425b      	neglt	r3, r3
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
	...

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fb2b 	bl	8000e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f82a 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f94c 	bl	8000a9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000804:	f000 f92c 	bl	8000a60 <MX_DMA_Init>
  MX_ADC_Init();
 8000808:	f000 f874 	bl	80008f4 <MX_ADC_Init>
  MX_TIM2_Init();
 800080c:	f000 f8dc 	bl	80009c8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000810:	f007 fb48 	bl	8007ea4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  controllerHID.x[0] = 0;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <main+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
  controllerHID.x[1] = 0;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <main+0x54>)
 800081c:	2200      	movs	r2, #0
 800081e:	705a      	strb	r2, [r3, #1]
  controllerHID.y[0] = 0;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <main+0x54>)
 8000822:	2200      	movs	r2, #0
 8000824:	709a      	strb	r2, [r3, #2]
  controllerHID.y[1] = 0;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <main+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	70da      	strb	r2, [r3, #3]
  controllerHID.buttons = 0;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <main+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	711a      	strb	r2, [r3, #4]

  //Setup Joystick(s)
  Init_Joysticks();
 8000832:	f7ff fe25 	bl	8000480 <Init_Joysticks>

  //Start Transmitting USB timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <main+0x58>)
 8000838:	f003 fce6 	bl	8004208 <HAL_TIM_Base_Start_IT>

  //Calibrate Joystick(s)
  Calibrate_Joysticks();
 800083c:	f7ff fe74 	bl	8000528 <Calibrate_Joysticks>

  //Enable USB Transmission
  USB_Stop = 0;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <main+0x5c>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000846:	e7fe      	b.n	8000846 <main+0x52>
 8000848:	200002d0 	.word	0x200002d0
 800084c:	200001f8 	.word	0x200001f8
 8000850:	20000008 	.word	0x20000008

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b092      	sub	sp, #72	; 0x48
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2234      	movs	r2, #52	; 0x34
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f007 ff46 	bl	80086f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <SystemClock_Config+0x9c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <SystemClock_Config+0x9c>)
 8000880:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000884:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000886:	2303      	movs	r3, #3
 8000888:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000892:	2310      	movs	r3, #16
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80008a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80008a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80008a6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 ff03 	bl	80036bc <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80008bc:	f000 f986 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2303      	movs	r3, #3
 80008c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fa1f 	bl	8003d1c <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e4:	f000 f972 	bl	8000bcc <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	3748      	adds	r7, #72	; 0x48
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000904:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <MX_ADC_Init+0xcc>)
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <MX_ADC_Init+0xd0>)
 8000908:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <MX_ADC_Init+0xcc>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <MX_ADC_Init+0xcc>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_ADC_Init+0xcc>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_ADC_Init+0xcc>)
 800091e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000922:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000924:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <MX_ADC_Init+0xcc>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_ADC_Init+0xcc>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <MX_ADC_Init+0xcc>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000936:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_ADC_Init+0xcc>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_ADC_Init+0xcc>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_ADC_Init+0xcc>)
 8000946:	2202      	movs	r2, #2
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_ADC_Init+0xcc>)
 800094c:	2201      	movs	r2, #1
 800094e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.NbrOfDiscConversion = 1;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_ADC_Init+0xcc>)
 8000954:	2201      	movs	r2, #1
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_ADC_Init+0xcc>)
 800095a:	2210      	movs	r2, #16
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_ADC_Init+0xcc>)
 8000960:	2200      	movs	r2, #0
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_ADC_Init+0xcc>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800096c:	4814      	ldr	r0, [pc, #80]	; (80009c0 <MX_ADC_Init+0xcc>)
 800096e:	f000 fadf 	bl	8000f30 <HAL_ADC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC_Init+0x88>
  {
    Error_Handler();
 8000978:	f000 f928 	bl	8000bcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000980:	2301      	movs	r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES;
 8000984:	2303      	movs	r3, #3
 8000986:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_ADC_Init+0xcc>)
 800098e:	f000 fcf7 	bl	8001380 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 8000998:	f000 f918 	bl	8000bcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800099c:	2301      	movs	r3, #1
 800099e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_ADC_Init+0xcc>)
 80009aa:	f000 fce9 	bl	8001380 <HAL_ADC_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC_Init+0xc4>
  {
    Error_Handler();
 80009b4:	f000 f90a 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000027c 	.word	0x2000027c
 80009c4:	40012400 	.word	0x40012400

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009ee:	f240 227f 	movw	r2, #639	; 0x27f
 80009f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009fc:	2231      	movs	r2, #49	; 0x31
 80009fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a0e:	f003 fbbb 	bl	8004188 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a18:	f000 f8d8 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a2a:	f003 fd1b 	bl	8004464 <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a34:	f000 f8ca 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a46:	f003 fee1 	bl	800480c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f8bc 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200001f8 	.word	0x200001f8

08000a60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_DMA_Init+0x38>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <MX_DMA_Init+0x38>)
 8000a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_DMA_Init+0x38>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	200b      	movs	r0, #11
 8000a84:	f000 ffaf 	bl	80019e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a88:	200b      	movs	r0, #11
 8000a8a:	f000 ffc8 	bl	8001a1e <HAL_NVIC_EnableIRQ>

}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_GPIO_Init+0x68>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_GPIO_Init+0x68>)
 8000ab8:	f043 0320 	orr.w	r3, r3, #32
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_GPIO_Init+0x68>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f003 0320 	and.w	r3, r3, #32
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_GPIO_Init+0x68>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <MX_GPIO_Init+0x68>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_GPIO_Init+0x68>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_GPIO_Init+0x6c>)
 8000af6:	f001 f981 	bl	8001dfc <HAL_GPIO_Init>

}
 8000afa:	bf00      	nop
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadcin){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc);
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b16:	f000 fbdf 	bl	80012d8 <HAL_ADC_Stop_DMA>
	Update_Values();
 8000b1a:	f7ff fdc5 	bl	80006a8 <Update_Values>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000027c 	.word	0x2000027c

08000b2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	if (TIM_Overlap)
		Timer_Overlap_Error();
	else
		TIM_Overlap = 1;
#endif
	if (!USB_Stop){
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d131      	bne.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&controllerHID, sizeof(struct controllerHID_t)) != USBD_OK){
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	491e      	ldr	r1, [pc, #120]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b40:	481e      	ldr	r0, [pc, #120]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b42:	f006 f8cd 	bl	8006ce0 <USBD_CUSTOM_HID_SendReport>
		else{
#if DEBUG_TRANSMIT
			USB_Success();
#endif
		}
		Update_Bounds(&joy[0]);
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fd3a 	bl	80005c4 <Update_Bounds>
		Map_Values(&joy[0]);
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fd67 	bl	8000628 <Map_Values>

		controllerHID.x[0] = LOWBYTE(joy[0].x);
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b66:	701a      	strb	r2, [r3, #0]
		controllerHID.x[1] = HIGHBYTE(joy[0].x);
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000b70:	121b      	asrs	r3, r3, #8
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b78:	705a      	strb	r2, [r3, #1]
		controllerHID.y[0] = LOWBYTE(joy[0].y);
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b86:	709a      	strb	r2, [r3, #2]
		controllerHID.y[1] = HIGHBYTE(joy[0].y);
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8000b90:	121b      	asrs	r3, r3, #8
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b98:	70da      	strb	r2, [r3, #3]
		controllerHID.buttons = 0;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	711a      	strb	r2, [r3, #4]
	}
	HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 2);
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ba6:	f000 fb09 	bl	80011bc <HAL_ADC_Start_DMA>
#if DEBUG_TRANSMIT
	TIM_Overlap = 0;
#endif
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	200002d0 	.word	0x200002d0
 8000bbc:	200002dc 	.word	0x200002dc
 8000bc0:	20000004 	.word	0x20000004
 8000bc4:	200001a0 	.word	0x200001a0
 8000bc8:	2000027c 	.word	0x2000027c

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <Error_Handler+0x6>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_MspInit+0x58>)
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bde:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <HAL_MspInit+0x58>)
 8000be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be4:	6253      	str	r3, [r2, #36]	; 0x24
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_MspInit+0x58>)
 8000be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_MspInit+0x58>)
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_MspInit+0x58>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6213      	str	r3, [r2, #32]
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_MspInit+0x58>)
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_MspInit+0x58>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0e:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_MspInit+0x58>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6253      	str	r3, [r2, #36]	; 0x24
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_MspInit+0x58>)
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <HAL_ADC_MspInit+0xc4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d14b      	bne.n	8000cea <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c52:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <HAL_ADC_MspInit+0xc8>)
 8000c54:	6a1b      	ldr	r3, [r3, #32]
 8000c56:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <HAL_ADC_MspInit+0xc8>)
 8000c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5c:	6213      	str	r3, [r2, #32]
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <HAL_ADC_MspInit+0xc8>)
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <HAL_ADC_MspInit+0xc8>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <HAL_ADC_MspInit+0xc8>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <HAL_ADC_MspInit+0xc8>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c82:	2303      	movs	r3, #3
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c86:	2303      	movs	r3, #3
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4819      	ldr	r0, [pc, #100]	; (8000cfc <HAL_ADC_MspInit+0xcc>)
 8000c96:	f001 f8b1 	bl	8001dfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_ADC_MspInit+0xd4>)
 8000c9e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cc0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000cd0:	f000 fec0 	bl	8001a54 <HAL_DMA_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8000cda:	f7ff ff77 	bl	8000bcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000ce2:	645a      	str	r2, [r3, #68]	; 0x44
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_ADC_MspInit+0xd0>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012400 	.word	0x40012400
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	20000238 	.word	0x20000238
 8000d04:	40026008 	.word	0x40026008

08000d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d113      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_TIM_Base_MspInit+0x44>)
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <HAL_TIM_Base_MspInit+0x44>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6253      	str	r3, [r2, #36]	; 0x24
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_TIM_Base_MspInit+0x44>)
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2101      	movs	r1, #1
 8000d36:	201c      	movs	r0, #28
 8000d38:	f000 fe55 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d3c:	201c      	movs	r0, #28
 8000d3e:	f000 fe6e 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d96:	f000 f8af 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <DMA1_Channel1_IRQHandler+0x10>)
 8000da6:	f000 ff4a 	bl	8001c3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000238 	.word	0x20000238

08000db4 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <USB_HP_IRQHandler+0x10>)
 8000dba:	f001 faa1 	bl	8002300 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000778 	.word	0x20000778

08000dc8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <USB_LP_IRQHandler+0x10>)
 8000dce:	f001 fa97 	bl	8002300 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000778 	.word	0x20000778

08000ddc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <TIM2_IRQHandler+0x10>)
 8000de2:	f003 fa63 	bl	80042ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001f8 	.word	0x200001f8

08000df0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <SystemInit+0x14>)
 8000df6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dfa:	609a      	str	r2, [r3, #8]
#endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e0a:	e003      	b.n	8000e14 <LoopCopyDataInit>

08000e0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e12:	3104      	adds	r1, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e1c:	d3f6      	bcc.n	8000e0c <CopyDataInit>
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e20:	e002      	b.n	8000e28 <LoopFillZerobss>

08000e22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e24:	f842 3b04 	str.w	r3, [r2], #4

08000e28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e2c:	d3f9      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e2e:	f7ff ffdf 	bl	8000df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f007 fc3b 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e36:	f7ff fcdd 	bl	80007f4 <main>
  bx lr
 8000e3a:	4770      	bx	lr
  ldr r3, =_sidata
 8000e3c:	08008784 	.word	0x08008784
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e44:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 8000e48:	20000184 	.word	0x20000184
  ldr r3, = _ebss
 8000e4c:	20000a64 	.word	0x20000a64

08000e50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC1_IRQHandler>

08000e52 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 fdb7 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f80e 	bl	8000e84 <HAL_InitTick>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	e001      	b.n	8000e78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e74:	f7ff feae 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e78:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_InitTick>:
  *       The function is declared as __weak  to be overwritten  in case of other
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_InitTick+0x68>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d022      	beq.n	8000ede <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_InitTick+0x6c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_InitTick+0x68>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fdc4 	bl	8001a3a <HAL_SYSTICK_Config>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10f      	bne.n	8000ed8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	d809      	bhi.n	8000ed2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec6:	f000 fd8e 	bl	80019e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_InitTick+0x70>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e007      	b.n	8000ee2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e004      	b.n	8000ee2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e001      	b.n	8000ee2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000014 	.word	0x20000014
 8000ef0:	2000000c 	.word	0x2000000c
 8000ef4:	20000010 	.word	0x20000010

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x1c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x20>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <HAL_IncTick+0x1c>)
 8000f08:	6013      	str	r3, [r2, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200002d8 	.word	0x200002d8
 8000f18:	20000014 	.word	0x20000014

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <HAL_GetTick+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	200002d8 	.word	0x200002d8

08000f30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	; 0x38
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e127      	b.n	80011a0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d115      	bne.n	8000f8a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	4b8e      	ldr	r3, [pc, #568]	; (80011a8 <HAL_ADC_Init+0x278>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4a8d      	ldr	r2, [pc, #564]	; (80011a8 <HAL_ADC_Init+0x278>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6213      	str	r3, [r2, #32]
 8000f78:	4b8b      	ldr	r3, [pc, #556]	; (80011a8 <HAL_ADC_Init+0x278>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fe53 	bl	8000c30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 80ff 	bne.w	8001196 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fa0:	f023 0302 	bic.w	r3, r3, #2
 8000fa4:	f043 0202 	orr.w	r2, r3, #2
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000fac:	4b7f      	ldr	r3, [pc, #508]	; (80011ac <HAL_ADC_Init+0x27c>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	497c      	ldr	r1, [pc, #496]	; (80011ac <HAL_ADC_Init+0x27c>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000fc6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd4:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fab3 f383 	clz	r3, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000fea:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ff0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001000:	fa93 f3a3 	rbit	r3, r3
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	fab3 f383 	clz	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001012:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001016:	4313      	orrs	r3, r2
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101e:	2b10      	cmp	r3, #16
 8001020:	d007      	beq.n	8001032 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800102a:	4313      	orrs	r3, r2
 800102c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800102e:	4313      	orrs	r3, r2
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103c:	2b40      	cmp	r3, #64	; 0x40
 800103e:	d04f      	beq.n	80010e0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001046:	4313      	orrs	r3, r2
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001052:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6912      	ldr	r2, [r2, #16]
 8001058:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800105c:	d003      	beq.n	8001066 <HAL_ADC_Init+0x136>
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6912      	ldr	r2, [r2, #16]
 8001062:	2a01      	cmp	r2, #1
 8001064:	d102      	bne.n	800106c <HAL_ADC_Init+0x13c>
 8001066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106a:	e000      	b.n	800106e <HAL_ADC_Init+0x13e>
 800106c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800106e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001072:	4313      	orrs	r3, r2
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800107c:	2b01      	cmp	r3, #1
 800107e:	d125      	bne.n	80010cc <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001086:	2b00      	cmp	r3, #0
 8001088:	d114      	bne.n	80010b4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	3b01      	subs	r3, #1
 8001090:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	fa92 f2a2 	rbit	r2, r2
 800109c:	617a      	str	r2, [r7, #20]
  return result;
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	fab2 f282 	clz	r2, r2
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	4093      	lsls	r3, r2
 80010a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ae:	4313      	orrs	r3, r2
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
 80010b2:	e00b      	b.n	80010cc <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	f043 0220 	orr.w	r2, r3, #32
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010c4:	f043 0201 	orr.w	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <HAL_ADC_Init+0x280>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010dc:	430b      	orrs	r3, r1
 80010de:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_ADC_Init+0x284>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010fc:	d003      	beq.n	8001106 <HAL_ADC_Init+0x1d6>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d119      	bne.n	800113a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	3b01      	subs	r3, #1
 8001116:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800111a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	fa92 f2a2 	rbit	r2, r2
 8001122:	60fa      	str	r2, [r7, #12]
  return result;
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	fa03 f202 	lsl.w	r2, r3, r2
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
 8001138:	e007      	b.n	800114a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_ADC_Init+0x288>)
 8001152:	4013      	ands	r3, r2
 8001154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001156:	429a      	cmp	r2, r3
 8001158:	d10b      	bne.n	8001172 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f023 0303 	bic.w	r3, r3, #3
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001170:	e014      	b.n	800119c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f023 0312 	bic.w	r3, r3, #18
 800117a:	f043 0210 	orr.w	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001186:	f043 0201 	orr.w	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001194:	e002      	b.n	800119c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800119c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3738      	adds	r7, #56	; 0x38
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40012700 	.word	0x40012700
 80011b0:	fcfc16ff 	.word	0xfcfc16ff
 80011b4:	c0fff18d 	.word	0xc0fff18d
 80011b8:	bf80fffe 	.word	0xbf80fffe

080011bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Start_DMA+0x1e>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e074      	b.n	80012c4 <HAL_ADC_Start_DMA+0x108>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 fa1c 	bl	8001620 <ADC_Enable>
 80011e8:	4603      	mov	r3, r0
 80011ea:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d167      	bne.n	80012c2 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800121c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001230:	d106      	bne.n	8001240 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001236:	f023 0206 	bic.w	r2, r3, #6
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	651a      	str	r2, [r3, #80]	; 0x50
 800123e:	e002      	b.n	8001246 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_ADC_Start_DMA+0x110>)
 8001254:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_ADC_Start_DMA+0x114>)
 800125c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <HAL_ADC_Start_DMA+0x118>)
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800126e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800127e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800128e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3358      	adds	r3, #88	; 0x58
 800129a:	4619      	mov	r1, r3
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f000 fc30 	bl	8001b04 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d107      	bne.n	80012c2 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	08001741 	.word	0x08001741
 80012d0:	080017e9 	.word	0x080017e9
 80012d4:	08001805 	.word	0x08001805

080012d8 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_ADC_Stop_DMA+0x1a>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e02f      	b.n	8001352 <HAL_ADC_Stop_DMA+0x7a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f9e6 	bl	80016cc <ADC_ConversionStop_Disable>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11e      	bne.n	8001348 <HAL_ADC_Stop_DMA+0x70>
  {
    /* Disable ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001318:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    HAL_DMA_Abort(hadc->DMA_Handle);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fc50 	bl	8001bc4 <HAL_DMA_Abort>
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	f043 0201 	orr.w	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001346:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
	...

08001380 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x20>
 800139c:	2302      	movs	r3, #2
 800139e:	e134      	b.n	800160a <HAL_ADC_ConfigChannel+0x28a>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b06      	cmp	r3, #6
 80013ae:	d81c      	bhi.n	80013ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	3b05      	subs	r3, #5
 80013c2:	221f      	movs	r2, #31
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4019      	ands	r1, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b05      	subs	r3, #5
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	641a      	str	r2, [r3, #64]	; 0x40
 80013e8:	e07e      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d81c      	bhi.n	800142c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3b23      	subs	r3, #35	; 0x23
 8001404:	221f      	movs	r2, #31
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	4019      	ands	r1, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	3b23      	subs	r3, #35	; 0x23
 800141e:	fa00 f203 	lsl.w	r2, r0, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	63da      	str	r2, [r3, #60]	; 0x3c
 800142a:	e05d      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b12      	cmp	r3, #18
 8001432:	d81c      	bhi.n	800146e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3b41      	subs	r3, #65	; 0x41
 8001446:	221f      	movs	r2, #31
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	4019      	ands	r1, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	3b41      	subs	r3, #65	; 0x41
 8001460:	fa00 f203 	lsl.w	r2, r0, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	639a      	str	r2, [r3, #56]	; 0x38
 800146c:	e03c      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b18      	cmp	r3, #24
 8001474:	d81c      	bhi.n	80014b0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b5f      	subs	r3, #95	; 0x5f
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	4019      	ands	r1, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	3b5f      	subs	r3, #95	; 0x5f
 80014a2:	fa00 f203 	lsl.w	r2, r0, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
 80014ae:	e01b      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b7d      	subs	r3, #125	; 0x7d
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4019      	ands	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3b7d      	subs	r3, #125	; 0x7d
 80014dc:	fa00 f203 	lsl.w	r2, r0, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	d81a      	bhi.n	8001526 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6959      	ldr	r1, [r3, #20]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	2207      	movs	r2, #7
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	4019      	ands	r1, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6898      	ldr	r0, [r3, #8]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	fa00 f203 	lsl.w	r2, r0, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	e042      	b.n	80015ac <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b13      	cmp	r3, #19
 800152c:	d81c      	bhi.n	8001568 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6919      	ldr	r1, [r3, #16]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	3b1e      	subs	r3, #30
 8001540:	2207      	movs	r2, #7
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	4019      	ands	r1, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6898      	ldr	r0, [r3, #8]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	3b1e      	subs	r3, #30
 800155a:	fa00 f203 	lsl.w	r2, r0, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	e021      	b.n	80015ac <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b1a      	cmp	r3, #26
 800156e:	d81c      	bhi.n	80015aa <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68d9      	ldr	r1, [r3, #12]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	3b3c      	subs	r3, #60	; 0x3c
 8001582:	2207      	movs	r2, #7
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	4019      	ands	r1, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	6898      	ldr	r0, [r3, #8]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	3b3c      	subs	r3, #60	; 0x3c
 800159c:	fa00 f203 	lsl.w	r2, r0, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	e000      	b.n	80015ac <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80015aa:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b10      	cmp	r3, #16
 80015b2:	d003      	beq.n	80015bc <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015b8:	2b11      	cmp	r3, #17
 80015ba:	d121      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_ADC_ConfigChannel+0x294>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d11b      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_ADC_ConfigChannel+0x294>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <HAL_ADC_ConfigChannel+0x294>)
 80015ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015d2:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b10      	cmp	r3, #16
 80015da:	d111      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_ADC_ConfigChannel+0x298>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_ADC_ConfigChannel+0x29c>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9a      	lsrs	r2, r3, #18
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80015f2:	e002      	b.n	80015fa <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f9      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40012700 	.word	0x40012700
 8001618:	2000000c 	.word	0x2000000c
 800161c:	431bde83 	.word	0x431bde83

08001620 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163a:	2b40      	cmp	r3, #64	; 0x40
 800163c:	d03c      	beq.n	80016b8 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <ADC_Enable+0xa4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <ADC_Enable+0xa8>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	0c9a      	lsrs	r2, r3, #18
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001662:	e002      	b.n	800166a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	3b01      	subs	r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f9      	bne.n	8001664 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001670:	f7ff fc54 	bl	8000f1c <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001676:	e018      	b.n	80016aa <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001678:	f7ff fc50 	bl	8000f1c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d911      	bls.n	80016aa <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f043 0210 	orr.w	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e007      	b.n	80016ba <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b4:	2b40      	cmp	r3, #64	; 0x40
 80016b6:	d1df      	bne.n	8001678 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000000c 	.word	0x2000000c
 80016c8:	431bde83 	.word	0x431bde83

080016cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e2:	2b40      	cmp	r3, #64	; 0x40
 80016e4:	d127      	bne.n	8001736 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016f6:	f7ff fc11 	bl	8000f1c <HAL_GetTick>
 80016fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016fc:	e014      	b.n	8001728 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80016fe:	f7ff fc0d 	bl	8000f1c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d90d      	bls.n	8001728 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	651a      	str	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e007      	b.n	8001738 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001732:	2b40      	cmp	r3, #64	; 0x40
 8001734:	d0e3      	beq.n	80016fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001756:	2b00      	cmp	r3, #0
 8001758:	d13d      	bne.n	80017d6 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d12c      	bne.n	80017ce <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	d127      	bne.n	80017ce <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001796:	2b00      	cmp	r3, #0
 8001798:	d119      	bne.n	80017ce <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0220 	bic.w	r2, r2, #32
 80017a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d105      	bne.n	80017ce <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f043 0201 	orr.w	r2, r3, #1
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff f99c 	bl	8000b0c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017d4:	e004      	b.n	80017e0 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fdaf 	bl	800135a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001822:	f043 0204 	orr.w	r2, r3, #4
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff fd9e 	bl	800136c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4906      	ldr	r1, [pc, #24]	; (80018d0 <__NVIC_EnableIRQ+0x34>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f7ff ff90 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff2d 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff42 	bl	8001880 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff90 	bl	8001928 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5f 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff35 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa2 	bl	800198c <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e043      	b.n	8001aee <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <HAL_DMA_Init+0xa4>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a22      	ldr	r2, [pc, #136]	; (8001afc <HAL_DMA_Init+0xa8>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	009a      	lsls	r2, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <HAL_DMA_Init+0xac>)
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	bffd9ff8 	.word	0xbffd9ff8
 8001afc:	cccccccd 	.word	0xcccccccd
 8001b00:	40026000 	.word	0x40026000

08001b04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_Start_IT+0x20>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e04b      	b.n	8001bbc <HAL_DMA_Start_IT+0xb8>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d13a      	bne.n	8001bae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 f91d 	bl	8001d9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 020e 	orr.w	r2, r2, #14
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e00f      	b.n	8001b9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0204 	bic.w	r2, r2, #4
 8001b8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 020a 	orr.w	r2, r2, #10
 8001b9a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e005      	b.n	8001bba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d008      	beq.n	8001bee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2204      	movs	r2, #4
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e022      	b.n	8001c34 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 020e 	bic.w	r2, r2, #14
 8001bfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 021c 	and.w	r2, r3, #28
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 031c 	and.w	r3, r3, #28
 8001c5e:	2204      	movs	r2, #4
 8001c60:	409a      	lsls	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d026      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x7a>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d021      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d107      	bne.n	8001c92 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0204 	bic.w	r2, r2, #4
 8001c90:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 021c 	and.w	r2, r3, #28
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d071      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cb6:	e06c      	b.n	8001d92 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f003 031c 	and.w	r3, r3, #28
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d02e      	beq.n	8001d2a <HAL_DMA_IRQHandler+0xec>
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d029      	beq.n	8001d2a <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10b      	bne.n	8001cfc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 020a 	bic.w	r2, r2, #10
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f003 021c 	and.w	r2, r3, #28
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	2102      	movs	r1, #2
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d038      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d28:	e033      	b.n	8001d92 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 031c 	and.w	r3, r3, #28
 8001d32:	2208      	movs	r2, #8
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d02a      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x156>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d025      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020e 	bic.w	r2, r2, #14
 8001d56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f003 021c 	and.w	r2, r3, #28
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d64:	2101      	movs	r1, #1
 8001d66:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d004      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
}
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 021c 	and.w	r2, r3, #28
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b10      	cmp	r3, #16
 8001dcc:	d108      	bne.n	8001de0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dde:	e007      	b.n	8001df0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e12:	e154      	b.n	80020be <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8146 	beq.w	80020b8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d00b      	beq.n	8001e4c <HAL_GPIO_Init+0x50>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d007      	beq.n	8001e4c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e40:	2b11      	cmp	r3, #17
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b12      	cmp	r3, #18
 8001e4a:	d130      	bne.n	8001eae <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001e82:	2201      	movs	r2, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 0201 	and.w	r2, r3, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0xf2>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d123      	bne.n	8001f36 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	08da      	lsrs	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3208      	adds	r2, #8
 8001ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	6939      	ldr	r1, [r7, #16]
 8001f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0203 	and.w	r2, r3, #3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80a0 	beq.w	80020b8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f78:	4b57      	ldr	r3, [pc, #348]	; (80020d8 <HAL_GPIO_Init+0x2dc>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a56      	ldr	r2, [pc, #344]	; (80020d8 <HAL_GPIO_Init+0x2dc>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	4b54      	ldr	r3, [pc, #336]	; (80020d8 <HAL_GPIO_Init+0x2dc>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_GPIO_Init+0x2e0>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a4a      	ldr	r2, [pc, #296]	; (80020e0 <HAL_GPIO_Init+0x2e4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d019      	beq.n	8001ff0 <HAL_GPIO_Init+0x1f4>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a49      	ldr	r2, [pc, #292]	; (80020e4 <HAL_GPIO_Init+0x2e8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <HAL_GPIO_Init+0x1f0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a48      	ldr	r2, [pc, #288]	; (80020e8 <HAL_GPIO_Init+0x2ec>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00d      	beq.n	8001fe8 <HAL_GPIO_Init+0x1ec>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a47      	ldr	r2, [pc, #284]	; (80020ec <HAL_GPIO_Init+0x2f0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <HAL_GPIO_Init+0x1e8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a46      	ldr	r2, [pc, #280]	; (80020f0 <HAL_GPIO_Init+0x2f4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_GPIO_Init+0x1e4>
 8001fdc:	2304      	movs	r3, #4
 8001fde:	e008      	b.n	8001ff2 <HAL_GPIO_Init+0x1f6>
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_Init+0x1f6>
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e004      	b.n	8001ff2 <HAL_GPIO_Init+0x1f6>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_Init+0x1f6>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_GPIO_Init+0x1f6>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	f002 0203 	and.w	r2, r2, #3
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002002:	4936      	ldr	r1, [pc, #216]	; (80020dc <HAL_GPIO_Init+0x2e0>)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002010:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_GPIO_Init+0x2f8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002034:	4a2f      	ldr	r2, [pc, #188]	; (80020f4 <HAL_GPIO_Init+0x2f8>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_GPIO_Init+0x2f8>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800205e:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <HAL_GPIO_Init+0x2f8>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_GPIO_Init+0x2f8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002088:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <HAL_GPIO_Init+0x2f8>)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_GPIO_Init+0x2f8>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020b2:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <HAL_GPIO_Init+0x2f8>)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f47f aea3 	bne.w	8001e14 <HAL_GPIO_Init+0x18>
  }
}
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	b08b      	sub	sp, #44	; 0x2c
 80020fc:	af06      	add	r7, sp, #24
 80020fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0d0      	b.n	80022ac <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f006 f838 	bl	8008194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f002 fbdf 	bl	80048f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e04c      	b.n	80021d6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	3301      	adds	r3, #1
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	b298      	uxth	r0, r3
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	3336      	adds	r3, #54	; 0x36
 800217a:	4602      	mov	r2, r0
 800217c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	3303      	adds	r3, #3
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	3338      	adds	r3, #56	; 0x38
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	333c      	adds	r3, #60	; 0x3c
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	3340      	adds	r3, #64	; 0x40
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	3301      	adds	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3ad      	bcc.n	800213c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e044      	b.n	8002270 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	3301      	adds	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d3b5      	bcc.n	80021e6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	687e      	ldr	r6, [r7, #4]
 8002282:	466d      	mov	r5, sp
 8002284:	f106 0410 	add.w	r4, r6, #16
 8002288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800228a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	602b      	str	r3, [r5, #0]
 8002290:	1d33      	adds	r3, r6, #4
 8002292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	f002 fb47 	bl	8004928 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_PCD_Start+0x16>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e016      	b.n	80022f8 <HAL_PCD_Start+0x44>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 faf6 	bl	80048c8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80022dc:	2101      	movs	r1, #1
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f005 ff3a 	bl	8008158 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 fad2 	bl	8006892 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f004 faca 	bl	80068a6 <USB_ReadInterrupts>
 8002312:	4603      	mov	r3, r0
 8002314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800231c:	d102      	bne.n	8002324 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 faec 	bl	80028fc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f004 fabc 	bl	80068a6 <USB_ReadInterrupts>
 800232e:	4603      	mov	r3, r0
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002338:	d112      	bne.n	8002360 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002342:	b29a      	uxth	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234c:	b292      	uxth	r2, r2
 800234e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f005 ffa1 	bl	800829a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002358:	2100      	movs	r1, #0
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8c7 	bl	80024ee <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f004 fa9e 	bl	80068a6 <USB_ReadInterrupts>
 800236a:	4603      	mov	r3, r0
 800236c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002374:	d10b      	bne.n	800238e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800237e:	b29a      	uxth	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002388:	b292      	uxth	r2, r2
 800238a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f004 fa87 	bl	80068a6 <USB_ReadInterrupts>
 8002398:	4603      	mov	r3, r0
 800239a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a2:	d10b      	bne.n	80023bc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023b6:	b292      	uxth	r2, r2
 80023b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f004 fa70 	bl	80068a6 <USB_ReadInterrupts>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d0:	d126      	bne.n	8002420 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0204 	bic.w	r2, r2, #4
 80023e4:	b292      	uxth	r2, r2
 80023e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0208 	bic.w	r2, r2, #8
 80023fc:	b292      	uxth	r2, r2
 80023fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f005 ff82 	bl	800830c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800241a:	b292      	uxth	r2, r2
 800241c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f004 fa3e 	bl	80068a6 <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002434:	d126      	bne.n	8002484 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0208 	orr.w	r2, r2, #8
 8002448:	b292      	uxth	r2, r2
 800244a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002456:	b29a      	uxth	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002460:	b292      	uxth	r2, r2
 8002462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800246e:	b29a      	uxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0204 	orr.w	r2, r2, #4
 8002478:	b292      	uxth	r2, r2
 800247a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f005 ff2a 	bl	80082d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f004 fa0c 	bl	80068a6 <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002498:	d10e      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024ac:	b292      	uxth	r2, r2
 80024ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f005 fee3 	bl	800827e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f004 f9f2 	bl	80068a6 <USB_ReadInterrupts>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024cc:	d10b      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e0:	b292      	uxth	r2, r2
 80024e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_PCD_SetAddress+0x1a>
 8002504:	2302      	movs	r3, #2
 8002506:	e013      	b.n	8002530 <HAL_PCD_SetAddress+0x42>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f004 f9a3 	bl	800686c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	70fb      	strb	r3, [r7, #3]
 800254a:	460b      	mov	r3, r1
 800254c:	803b      	strh	r3, [r7, #0]
 800254e:	4613      	mov	r3, r2
 8002550:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800255a:	2b00      	cmp	r3, #0
 800255c:	da0e      	bge.n	800257c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	705a      	strb	r2, [r3, #1]
 800257a:	e00e      	b.n	800259a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	f003 0207 	and.w	r2, r3, #7
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025a6:	883a      	ldrh	r2, [r7, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	78ba      	ldrb	r2, [r7, #2]
 80025b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	785b      	ldrb	r3, [r3, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025c4:	78bb      	ldrb	r3, [r7, #2]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d102      	bne.n	80025d0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_PCD_EP_Open+0xa6>
 80025da:	2302      	movs	r3, #2
 80025dc:	e00e      	b.n	80025fc <HAL_PCD_EP_Open+0xc4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68f9      	ldr	r1, [r7, #12]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f002 f9bb 	bl	8004968 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80025fa:	7afb      	ldrb	r3, [r7, #11]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002614:	2b00      	cmp	r3, #0
 8002616:	da0e      	bge.n	8002636 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	705a      	strb	r2, [r3, #1]
 8002634:	e00e      	b.n	8002654 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 0207 	and.w	r2, r3, #7
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	b2da      	uxtb	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_PCD_EP_Close+0x6a>
 800266a:	2302      	movs	r3, #2
 800266c:	e00e      	b.n	800268c <HAL_PCD_EP_Close+0x88>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	4618      	mov	r0, r3
 800267e:	f002 fcdd 	bl	800503c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	460b      	mov	r3, r1
 80026a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a4:	7afb      	ldrb	r3, [r7, #11]
 80026a6:	f003 0207 	and.w	r2, r3, #7
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2200      	movs	r2, #0
 80026d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d4:	7afb      	ldrb	r3, [r7, #11]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026e0:	7afb      	ldrb	r3, [r7, #11]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6979      	ldr	r1, [r7, #20]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fe8f 	bl	8005414 <USB_EPStartXfer>
 80026f6:	e005      	b.n	8002704 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6979      	ldr	r1, [r7, #20]
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fe88 	bl	8005414 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	460b      	mov	r3, r1
 800271c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800271e:	7afb      	ldrb	r3, [r7, #11]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4413      	add	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2200      	movs	r2, #0
 8002752:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2201      	movs	r2, #1
 8002758:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	b2da      	uxtb	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002766:	7afb      	ldrb	r3, [r7, #11]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6979      	ldr	r1, [r7, #20]
 8002776:	4618      	mov	r0, r3
 8002778:	f002 fe4c 	bl	8005414 <USB_EPStartXfer>
 800277c:	e005      	b.n	800278a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6979      	ldr	r1, [r7, #20]
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fe45 	bl	8005414 <USB_EPStartXfer>
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 0207 	and.w	r2, r3, #7
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d901      	bls.n	80027b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e04c      	b.n	800284c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	da0e      	bge.n	80027d8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	705a      	strb	r2, [r3, #1]
 80027d6:	e00c      	b.n	80027f2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_PCD_EP_SetStall+0x7e>
 800280e:	2302      	movs	r3, #2
 8002810:	e01c      	b.n	800284c <HAL_PCD_EP_SetStall+0xb8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68f9      	ldr	r1, [r7, #12]
 8002820:	4618      	mov	r0, r3
 8002822:	f003 ff26 	bl	8006672 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	2b00      	cmp	r3, #0
 800282e:	d108      	bne.n	8002842 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800283a:	4619      	mov	r1, r3
 800283c:	4610      	mov	r0, r2
 800283e:	f004 f841 	bl	80068c4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	f003 020f 	and.w	r2, r3, #15
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	429a      	cmp	r2, r3
 800286c:	d901      	bls.n	8002872 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e040      	b.n	80028f4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002876:	2b00      	cmp	r3, #0
 8002878:	da0e      	bge.n	8002898 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	705a      	strb	r2, [r3, #1]
 8002896:	e00e      	b.n	80028b6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	f003 0207 	and.w	r2, r3, #7
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_PCD_EP_ClrStall+0x82>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e00e      	b.n	80028f4 <HAL_PCD_EP_ClrStall+0xa0>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68f9      	ldr	r1, [r7, #12]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 ff14 	bl	8006712 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08e      	sub	sp, #56	; 0x38
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002904:	e2df      	b.n	8002ec6 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800290e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002910:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800291c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 8158 	bne.w	8002bd6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002926:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d152      	bne.n	80029d6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800293c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002940:	81fb      	strh	r3, [r7, #14]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	89fb      	ldrh	r3, [r7, #14]
 8002948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002950:	b29b      	uxth	r3, r3
 8002952:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3328      	adds	r3, #40	; 0x28
 8002958:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	3302      	adds	r3, #2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	441a      	add	r2, r3
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002994:	2100      	movs	r1, #0
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f005 fc57 	bl	800824a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 828e 	beq.w	8002ec6 <PCD_EP_ISR_Handler+0x5ca>
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 8289 	bne.w	8002ec6 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	b292      	uxth	r2, r2
 80029c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029d4:	e277      	b.n	8002ec6 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d034      	beq.n	8002a5a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	3306      	adds	r3, #6
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f003 ff97 	bl	8006962 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a40:	4013      	ands	r3, r2
 8002a42:	823b      	strh	r3, [r7, #16]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	8a3a      	ldrh	r2, [r7, #16]
 8002a4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f005 fbcc 	bl	80081f0 <HAL_PCD_SetupStageCallback>
 8002a58:	e235      	b.n	8002ec6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a5a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f280 8231 	bge.w	8002ec6 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a70:	4013      	ands	r3, r2
 8002a72:	83bb      	strh	r3, [r7, #28]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	8bba      	ldrh	r2, [r7, #28]
 8002a7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	3306      	adds	r3, #6
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d019      	beq.n	8002aea <PCD_EP_ISR_Handler+0x1ee>
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d015      	beq.n	8002aea <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	6959      	ldr	r1, [r3, #20]
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f003 ff47 	bl	8006962 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	441a      	add	r2, r3
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f005 fb95 	bl	8008214 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4413      	add	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d112      	bne.n	8002b38 <PCD_EP_ISR_Handler+0x23c>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	801a      	strh	r2, [r3, #0]
 8002b36:	e02f      	b.n	8002b98 <PCD_EP_ISR_Handler+0x29c>
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b3e:	d813      	bhi.n	8002b68 <PCD_EP_ISR_Handler+0x26c>
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <PCD_EP_ISR_Handler+0x25e>
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	3301      	adds	r3, #1
 8002b58:	633b      	str	r3, [r7, #48]	; 0x30
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	029b      	lsls	r3, r3, #10
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	801a      	strh	r2, [r3, #0]
 8002b66:	e017      	b.n	8002b98 <PCD_EP_ISR_Handler+0x29c>
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <PCD_EP_ISR_Handler+0x286>
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	029b      	lsls	r3, r3, #10
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba8:	827b      	strh	r3, [r7, #18]
 8002baa:	8a7b      	ldrh	r3, [r7, #18]
 8002bac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002bb0:	827b      	strh	r3, [r7, #18]
 8002bb2:	8a7b      	ldrh	r3, [r7, #18]
 8002bb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bb8:	827b      	strh	r3, [r7, #18]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	8a7b      	ldrh	r3, [r7, #18]
 8002bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	8013      	strh	r3, [r2, #0]
 8002bd4:	e177      	b.n	8002ec6 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002be8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f280 80ea 	bge.w	8002dc6 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c08:	4013      	ands	r3, r2
 8002c0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c20:	b292      	uxth	r2, r2
 8002c22:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c24:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	7b1b      	ldrb	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d122      	bne.n	8002c88 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	3306      	adds	r3, #6
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002c6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8087 	beq.w	8002d82 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	6959      	ldr	r1, [r3, #20]
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	88da      	ldrh	r2, [r3, #6]
 8002c80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c82:	f003 fe6e 	bl	8006962 <USB_ReadPMA>
 8002c86:	e07c      	b.n	8002d82 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	78db      	ldrb	r3, [r3, #3]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d108      	bne.n	8002ca2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c92:	461a      	mov	r2, r3
 8002c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f923 	bl	8002ee2 <HAL_PCD_EP_DB_Receive>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ca0:	e06f      	b.n	8002d82 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbc:	847b      	strh	r3, [r7, #34]	; 0x22
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	441a      	add	r2, r3
 8002ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d021      	beq.n	8002d40 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3302      	adds	r3, #2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d24:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002d26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d02a      	beq.n	8002d82 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	6959      	ldr	r1, [r3, #20]
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	891a      	ldrh	r2, [r3, #8]
 8002d38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d3a:	f003 fe12 	bl	8006962 <USB_ReadPMA>
 8002d3e:	e020      	b.n	8002d82 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	3306      	adds	r3, #6
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d68:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002d6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	6959      	ldr	r1, [r3, #20]
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	895a      	ldrh	r2, [r3, #10]
 8002d7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d7e:	f003 fdf0 	bl	8006962 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d88:	441a      	add	r2, r3
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d94:	441a      	add	r2, r3
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <PCD_EP_ISR_Handler+0x4b0>
 8002da2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d206      	bcs.n	8002dba <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f005 fa2e 	bl	8008214 <HAL_PCD_DataOutStageCallback>
 8002db8:	e005      	b.n	8002dc6 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fb27 	bl	8005414 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002dc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d07a      	beq.n	8002ec6 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002dd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	843b      	strh	r3, [r7, #32]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	441a      	add	r2, r3
 8002e0e:	8c3b      	ldrh	r3, [r7, #32]
 8002e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	78db      	ldrb	r3, [r3, #3]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d108      	bne.n	8002e36 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d146      	bne.n	8002eba <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d141      	bne.n	8002eba <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	8bfb      	ldrh	r3, [r7, #30]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d906      	bls.n	8002e78 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	8bfb      	ldrh	r3, [r7, #30]
 8002e70:	1ad2      	subs	r2, r2, r3
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	619a      	str	r2, [r3, #24]
 8002e76:	e002      	b.n	8002e7e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f005 f9dc 	bl	800824a <HAL_PCD_DataInStageCallback>
 8002e92:	e018      	b.n	8002ec6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	8bfb      	ldrh	r3, [r7, #30]
 8002e9a:	441a      	add	r2, r3
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	8bfb      	ldrh	r3, [r7, #30]
 8002ea6:	441a      	add	r2, r3
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 faae 	bl	8005414 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002eb8:	e005      	b.n	8002ec6 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002eba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f91b 	bl	80030fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b21b      	sxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f6ff ad17 	blt.w	8002906 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3738      	adds	r7, #56	; 0x38
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b088      	sub	sp, #32
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	4613      	mov	r3, r2
 8002eee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d07e      	beq.n	8002ff8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	8b7b      	ldrh	r3, [r7, #26]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d306      	bcc.n	8002f3c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	8b7b      	ldrh	r3, [r7, #26]
 8002f34:	1ad2      	subs	r2, r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	619a      	str	r2, [r3, #24]
 8002f3a:	e002      	b.n	8002f42 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d123      	bne.n	8002f92 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f64:	833b      	strh	r3, [r7, #24]
 8002f66:	8b3b      	ldrh	r3, [r7, #24]
 8002f68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f6c:	833b      	strh	r3, [r7, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	441a      	add	r2, r3
 8002f7c:	8b3b      	ldrh	r3, [r7, #24]
 8002f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01f      	beq.n	8002fdc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	82fb      	strh	r3, [r7, #22]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	8afb      	ldrh	r3, [r7, #22]
 8002fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fdc:	8b7b      	ldrh	r3, [r7, #26]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8087 	beq.w	80030f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	6959      	ldr	r1, [r3, #20]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	891a      	ldrh	r2, [r3, #8]
 8002ff0:	8b7b      	ldrh	r3, [r7, #26]
 8002ff2:	f003 fcb6 	bl	8006962 <USB_ReadPMA>
 8002ff6:	e07c      	b.n	80030f2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	3306      	adds	r3, #6
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003020:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	8b7b      	ldrh	r3, [r7, #26]
 8003028:	429a      	cmp	r2, r3
 800302a:	d306      	bcc.n	800303a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	8b7b      	ldrh	r3, [r7, #26]
 8003032:	1ad2      	subs	r2, r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	619a      	str	r2, [r3, #24]
 8003038:	e002      	b.n	8003040 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d123      	bne.n	8003090 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800305e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003062:	83fb      	strh	r3, [r7, #30]
 8003064:	8bfb      	ldrh	r3, [r7, #30]
 8003066:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800306a:	83fb      	strh	r3, [r7, #30]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	441a      	add	r2, r3
 800307a:	8bfb      	ldrh	r3, [r7, #30]
 800307c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308c:	b29b      	uxth	r3, r3
 800308e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d11f      	bne.n	80030da <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b4:	83bb      	strh	r3, [r7, #28]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	441a      	add	r2, r3
 80030c4:	8bbb      	ldrh	r3, [r7, #28]
 80030c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030da:	8b7b      	ldrh	r3, [r7, #26]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6959      	ldr	r1, [r3, #20]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	895a      	ldrh	r2, [r3, #10]
 80030ec:	8b7b      	ldrh	r3, [r7, #26]
 80030ee:	f003 fc38 	bl	8006962 <USB_ReadPMA>
    }
  }

  return count;
 80030f2:	8b7b      	ldrh	r3, [r7, #26]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b092      	sub	sp, #72	; 0x48
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8132 	beq.w	800337a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	3302      	adds	r3, #2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800313e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003146:	429a      	cmp	r2, r3
 8003148:	d906      	bls.n	8003158 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003150:	1ad2      	subs	r2, r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	619a      	str	r2, [r3, #24]
 8003156:	e002      	b.n	800315e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2200      	movs	r2, #0
 800315c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d12c      	bne.n	80031c0 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	4619      	mov	r1, r3
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f005 f86c 	bl	800824a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 822f 	beq.w	80035dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003198:	827b      	strh	r3, [r7, #18]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	441a      	add	r2, r3
 80031a8:	8a7b      	ldrh	r3, [r7, #18]
 80031aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	8013      	strh	r3, [r2, #0]
 80031be:	e20d      	b.n	80035dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01f      	beq.n	800320a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	441a      	add	r2, r3
 80031f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003206:	b29b      	uxth	r3, r3
 8003208:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 81e3 	bne.w	80035dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800321c:	441a      	add	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003228:	441a      	add	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	6a1a      	ldr	r2, [r3, #32]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	429a      	cmp	r2, r3
 8003238:	d309      	bcc.n	800324e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	6a1a      	ldr	r2, [r3, #32]
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	1ad2      	subs	r2, r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	621a      	str	r2, [r3, #32]
 800324c:	e014      	b.n	8003278 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003256:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003258:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003262:	e009      	b.n	8003278 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	785b      	ldrb	r3, [r3, #1]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d155      	bne.n	800332c <HAL_PCD_EP_DB_Transmit+0x230>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328e:	b29b      	uxth	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4413      	add	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	011a      	lsls	r2, r3, #4
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4413      	add	r3, r2
 80032a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d112      	bne.n	80032d4 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	801a      	strh	r2, [r3, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	801a      	strh	r2, [r3, #0]
 80032d2:	e047      	b.n	8003364 <HAL_PCD_EP_DB_Transmit+0x268>
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d6:	2b3e      	cmp	r3, #62	; 0x3e
 80032d8:	d811      	bhi.n	80032fe <HAL_PCD_EP_DB_Transmit+0x202>
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	085b      	lsrs	r3, r3, #1
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	3301      	adds	r3, #1
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	029b      	lsls	r3, r3, #10
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	801a      	strh	r2, [r3, #0]
 80032fc:	e032      	b.n	8003364 <HAL_PCD_EP_DB_Transmit+0x268>
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_PCD_EP_DB_Transmit+0x218>
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	b29b      	uxth	r3, r3
 8003318:	029b      	lsls	r3, r3, #10
 800331a:	b29b      	uxth	r3, r3
 800331c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003324:	b29a      	uxth	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	801a      	strh	r2, [r3, #0]
 800332a:	e01b      	b.n	8003364 <HAL_PCD_EP_DB_Transmit+0x268>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d117      	bne.n	8003364 <HAL_PCD_EP_DB_Transmit+0x268>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003342:	b29b      	uxth	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	4413      	add	r3, r2
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	011a      	lsls	r2, r3, #4
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	4413      	add	r3, r2
 8003356:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	b29a      	uxth	r2, r3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	6959      	ldr	r1, [r3, #20]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	891a      	ldrh	r2, [r3, #8]
 8003370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003372:	b29b      	uxth	r3, r3
 8003374:	f003 fab1 	bl	80068da <USB_WritePMA>
 8003378:	e130      	b.n	80035dc <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	3306      	adds	r3, #6
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d306      	bcc.n	80033bc <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033b4:	1ad2      	subs	r2, r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	619a      	str	r2, [r3, #24]
 80033ba:	e002      	b.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2200      	movs	r2, #0
 80033c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d12c      	bne.n	8003424 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f004 ff3a 	bl	800824a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 80fd 	bne.w	80035dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	441a      	add	r2, r3
 800340c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800340e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800341a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341e:	b29b      	uxth	r3, r3
 8003420:	8013      	strh	r3, [r2, #0]
 8003422:	e0db      	b.n	80035dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11f      	bne.n	800346e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003448:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	441a      	add	r2, r3
 8003458:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003474:	2b01      	cmp	r3, #1
 8003476:	f040 80b1 	bne.w	80035dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003480:	441a      	add	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800348c:	441a      	add	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	6a1a      	ldr	r2, [r3, #32]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	429a      	cmp	r2, r3
 800349c:	d309      	bcc.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	6a1a      	ldr	r2, [r3, #32]
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	621a      	str	r2, [r3, #32]
 80034b0:	e014      	b.n	80034dc <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80034ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034bc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034c6:	e009      	b.n	80034dc <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d155      	bne.n	8003596 <HAL_PCD_EP_DB_Transmit+0x49a>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	647b      	str	r3, [r7, #68]	; 0x44
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034fe:	4413      	add	r3, r2
 8003500:	647b      	str	r3, [r7, #68]	; 0x44
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	011a      	lsls	r2, r3, #4
 8003508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350a:	4413      	add	r3, r2
 800350c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003510:	643b      	str	r3, [r7, #64]	; 0x40
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	2b00      	cmp	r3, #0
 8003516:	d112      	bne.n	800353e <HAL_PCD_EP_DB_Transmit+0x442>
 8003518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003522:	b29a      	uxth	r2, r3
 8003524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003526:	801a      	strh	r2, [r3, #0]
 8003528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003536:	b29a      	uxth	r2, r3
 8003538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353a:	801a      	strh	r2, [r3, #0]
 800353c:	e044      	b.n	80035c8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	2b3e      	cmp	r3, #62	; 0x3e
 8003542:	d811      	bhi.n	8003568 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_PCD_EP_DB_Transmit+0x45e>
 8003554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003556:	3301      	adds	r3, #1
 8003558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	b29b      	uxth	r3, r3
 800355e:	029b      	lsls	r3, r3, #10
 8003560:	b29a      	uxth	r2, r3
 8003562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003564:	801a      	strh	r2, [r3, #0]
 8003566:	e02f      	b.n	80035c8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <HAL_PCD_EP_DB_Transmit+0x482>
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	3b01      	subs	r3, #1
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003580:	b29b      	uxth	r3, r3
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	b29b      	uxth	r3, r3
 8003586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800358a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800358e:	b29a      	uxth	r2, r3
 8003590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003592:	801a      	strh	r2, [r3, #0]
 8003594:	e018      	b.n	80035c8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d114      	bne.n	80035c8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	4413      	add	r3, r2
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	011a      	lsls	r2, r3, #4
 80035b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b8:	4413      	add	r3, r2
 80035ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035be:	633b      	str	r3, [r7, #48]	; 0x30
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	6959      	ldr	r1, [r3, #20]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	895a      	ldrh	r2, [r3, #10]
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f003 f97f 	bl	80068da <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f6:	823b      	strh	r3, [r7, #16]
 80035f8:	8a3b      	ldrh	r3, [r7, #16]
 80035fa:	f083 0310 	eor.w	r3, r3, #16
 80035fe:	823b      	strh	r3, [r7, #16]
 8003600:	8a3b      	ldrh	r3, [r7, #16]
 8003602:	f083 0320 	eor.w	r3, r3, #32
 8003606:	823b      	strh	r3, [r7, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	8a3b      	ldrh	r3, [r7, #16]
 8003618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003628:	b29b      	uxth	r3, r3
 800362a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3748      	adds	r7, #72	; 0x48
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003636:	b480      	push	{r7}
 8003638:	b087      	sub	sp, #28
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	607b      	str	r3, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	817b      	strh	r3, [r7, #10]
 8003644:	4613      	mov	r3, r2
 8003646:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003648:	897b      	ldrh	r3, [r7, #10]
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00b      	beq.n	800366c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003654:	897b      	ldrh	r3, [r7, #10]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e009      	b.n	8003680 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800366c:	897a      	ldrh	r2, [r7, #10]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4413      	add	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003680:	893b      	ldrh	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d107      	bne.n	8003696 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2200      	movs	r2, #0
 800368a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	b29a      	uxth	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	80da      	strh	r2, [r3, #6]
 8003694:	e00b      	b.n	80036ae <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2201      	movs	r2, #1
 800369a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	b29a      	uxth	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e31d      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ce:	4b94      	ldr	r3, [pc, #592]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036d8:	4b91      	ldr	r3, [pc, #580]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d07b      	beq.n	80037e6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d006      	beq.n	8003702 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d10f      	bne.n	800371a <HAL_RCC_OscConfig+0x5e>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003700:	d10b      	bne.n	800371a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003702:	4b87      	ldr	r3, [pc, #540]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d06a      	beq.n	80037e4 <HAL_RCC_OscConfig+0x128>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d166      	bne.n	80037e4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e2f7      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d106      	bne.n	8003730 <HAL_RCC_OscConfig+0x74>
 8003722:	4b7f      	ldr	r3, [pc, #508]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7e      	ldr	r2, [pc, #504]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e02d      	b.n	800378c <HAL_RCC_OscConfig+0xd0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10c      	bne.n	8003752 <HAL_RCC_OscConfig+0x96>
 8003738:	4b79      	ldr	r3, [pc, #484]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a78      	ldr	r2, [pc, #480]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a75      	ldr	r2, [pc, #468]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800374a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	e01c      	b.n	800378c <HAL_RCC_OscConfig+0xd0>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b05      	cmp	r3, #5
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0xb8>
 800375a:	4b71      	ldr	r3, [pc, #452]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a70      	ldr	r2, [pc, #448]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b6e      	ldr	r3, [pc, #440]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6d      	ldr	r2, [pc, #436]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0xd0>
 8003774:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a69      	ldr	r2, [pc, #420]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800377a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a66      	ldr	r2, [pc, #408]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800378a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fd fbc2 	bl	8000f1c <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800379c:	f7fd fbbe 	bl	8000f1c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	; 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e2ad      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ae:	4b5c      	ldr	r3, [pc, #368]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0xe0>
 80037ba:	e014      	b.n	80037e6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fbae 	bl	8000f1c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd fbaa 	bl	8000f1c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e299      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037d6:	4b52      	ldr	r3, [pc, #328]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x108>
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d05a      	beq.n	80038a8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d119      	bne.n	8003832 <HAL_RCC_OscConfig+0x176>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d116      	bne.n	8003832 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003804:	4b46      	ldr	r3, [pc, #280]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_OscConfig+0x160>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d001      	beq.n	800381c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e276      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381c:	4b40      	ldr	r3, [pc, #256]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	493d      	ldr	r1, [pc, #244]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003830:	e03a      	b.n	80038a8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d020      	beq.n	800387c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800383a:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <HAL_RCC_OscConfig+0x268>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fd fb6c 	bl	8000f1c <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003848:	f7fd fb68 	bl	8000f1c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e257      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800385a:	4b31      	ldr	r3, [pc, #196]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003866:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	492a      	ldr	r1, [pc, #168]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
 800387a:	e015      	b.n	80038a8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387c:	4b29      	ldr	r3, [pc, #164]	; (8003924 <HAL_RCC_OscConfig+0x268>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fd fb4b 	bl	8000f1c <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800388a:	f7fd fb47 	bl	8000f1c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e236      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800389c:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80b8 	beq.w	8003a26 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d170      	bne.n	800399e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038bc:	4b18      	ldr	r3, [pc, #96]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_OscConfig+0x218>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e21a      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1a      	ldr	r2, [r3, #32]
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d921      	bls.n	8003928 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fbed 	bl	80040c8 <RCC_SetFlashLatencyFromMSIRange>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e208      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4906      	ldr	r1, [pc, #24]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	061b      	lsls	r3, r3, #24
 8003918:	4901      	ldr	r1, [pc, #4]	; (8003920 <HAL_RCC_OscConfig+0x264>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
 800391e:	e020      	b.n	8003962 <HAL_RCC_OscConfig+0x2a6>
 8003920:	40023800 	.word	0x40023800
 8003924:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003928:	4ba4      	ldr	r3, [pc, #656]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	49a1      	ldr	r1, [pc, #644]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393a:	4ba0      	ldr	r3, [pc, #640]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	061b      	lsls	r3, r3, #24
 8003948:	499c      	ldr	r1, [pc, #624]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fbb8 	bl	80040c8 <RCC_SetFlashLatencyFromMSIRange>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e1d3      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	0b5b      	lsrs	r3, r3, #13
 8003968:	3301      	adds	r3, #1
 800396a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003972:	4a92      	ldr	r2, [pc, #584]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003974:	6892      	ldr	r2, [r2, #8]
 8003976:	0912      	lsrs	r2, r2, #4
 8003978:	f002 020f 	and.w	r2, r2, #15
 800397c:	4990      	ldr	r1, [pc, #576]	; (8003bc0 <HAL_RCC_OscConfig+0x504>)
 800397e:	5c8a      	ldrb	r2, [r1, r2]
 8003980:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003982:	4a90      	ldr	r2, [pc, #576]	; (8003bc4 <HAL_RCC_OscConfig+0x508>)
 8003984:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003986:	4b90      	ldr	r3, [pc, #576]	; (8003bc8 <HAL_RCC_OscConfig+0x50c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fa7a 	bl	8000e84 <HAL_InitTick>
 8003990:	4603      	mov	r3, r0
 8003992:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d045      	beq.n	8003a26 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	e1b5      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d029      	beq.n	80039fa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039a6:	4b89      	ldr	r3, [pc, #548]	; (8003bcc <HAL_RCC_OscConfig+0x510>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd fab6 	bl	8000f1c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039b4:	f7fd fab2 	bl	8000f1c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1a1      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80039c6:	4b7d      	ldr	r3, [pc, #500]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d2:	4b7a      	ldr	r3, [pc, #488]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4977      	ldr	r1, [pc, #476]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e4:	4b75      	ldr	r3, [pc, #468]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	4972      	ldr	r1, [pc, #456]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	e015      	b.n	8003a26 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039fa:	4b74      	ldr	r3, [pc, #464]	; (8003bcc <HAL_RCC_OscConfig+0x510>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fd fa8c 	bl	8000f1c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a08:	f7fd fa88 	bl	8000f1c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e177      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003a1a:	4b68      	ldr	r3, [pc, #416]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d030      	beq.n	8003a94 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3a:	4b65      	ldr	r3, [pc, #404]	; (8003bd0 <HAL_RCC_OscConfig+0x514>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a40:	f7fd fa6c 	bl	8000f1c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a48:	f7fd fa68 	bl	8000f1c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e157      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a5a:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x38c>
 8003a66:	e015      	b.n	8003a94 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a68:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <HAL_RCC_OscConfig+0x514>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fa55 	bl	8000f1c <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fd fa51 	bl	8000f1c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e140      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a88:	4b4c      	ldr	r3, [pc, #304]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80b5 	beq.w	8003c0c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa6:	4b45      	ldr	r3, [pc, #276]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	4b42      	ldr	r3, [pc, #264]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	4a41      	ldr	r2, [pc, #260]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6253      	str	r3, [r2, #36]	; 0x24
 8003abe:	4b3f      	ldr	r3, [pc, #252]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aca:	2301      	movs	r3, #1
 8003acc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <HAL_RCC_OscConfig+0x518>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d118      	bne.n	8003b0c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ada:	4b3e      	ldr	r3, [pc, #248]	; (8003bd4 <HAL_RCC_OscConfig+0x518>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3d      	ldr	r2, [pc, #244]	; (8003bd4 <HAL_RCC_OscConfig+0x518>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae6:	f7fd fa19 	bl	8000f1c <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7fd fa15 	bl	8000f1c <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b64      	cmp	r3, #100	; 0x64
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e104      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <HAL_RCC_OscConfig+0x518>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x466>
 8003b14:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	4a28      	ldr	r2, [pc, #160]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6353      	str	r3, [r2, #52]	; 0x34
 8003b20:	e02d      	b.n	8003b7e <HAL_RCC_OscConfig+0x4c2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x488>
 8003b2a:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	4a23      	ldr	r2, [pc, #140]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b34:	6353      	str	r3, [r2, #52]	; 0x34
 8003b36:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3a:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b40:	6353      	str	r3, [r2, #52]	; 0x34
 8003b42:	e01c      	b.n	8003b7e <HAL_RCC_OscConfig+0x4c2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_OscConfig+0x4aa>
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b56:	6353      	str	r3, [r2, #52]	; 0x34
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6353      	str	r3, [r2, #52]	; 0x34
 8003b64:	e00b      	b.n	8003b7e <HAL_RCC_OscConfig+0x4c2>
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b70:	6353      	str	r3, [r2, #52]	; 0x34
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b7c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fd f9c9 	bl	8000f1c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fd f9c5 	bl	8000f1c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0b2      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ee      	beq.n	8003b8e <HAL_RCC_OscConfig+0x4d2>
 8003bb0:	e023      	b.n	8003bfa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fd f9b3 	bl	8000f1c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bb8:	e019      	b.n	8003bee <HAL_RCC_OscConfig+0x532>
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	08008764 	.word	0x08008764
 8003bc4:	2000000c 	.word	0x2000000c
 8003bc8:	20000010 	.word	0x20000010
 8003bcc:	42470020 	.word	0x42470020
 8003bd0:	42470680 	.word	0x42470680
 8003bd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fd f9a0 	bl	8000f1c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e08d      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bee:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <HAL_RCC_OscConfig+0x658>)
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ee      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bfa:	7ffb      	ldrb	r3, [r7, #31]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c00:	4b44      	ldr	r3, [pc, #272]	; (8003d14 <HAL_RCC_OscConfig+0x658>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	4a43      	ldr	r2, [pc, #268]	; (8003d14 <HAL_RCC_OscConfig+0x658>)
 8003c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d079      	beq.n	8003d08 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d056      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d13b      	bne.n	8003c9a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c22:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <HAL_RCC_OscConfig+0x65c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fd f978 	bl	8000f1c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fd f974 	bl	8000f1c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e063      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c42:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCC_OscConfig+0x658>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <HAL_RCC_OscConfig+0x658>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	4319      	orrs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	430b      	orrs	r3, r1
 8003c66:	492b      	ldr	r1, [pc, #172]	; (8003d14 <HAL_RCC_OscConfig+0x658>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_RCC_OscConfig+0x65c>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd f953 	bl	8000f1c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fd f94f 	bl	8000f1c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e03e      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <HAL_RCC_OscConfig+0x658>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x5be>
 8003c98:	e036      	b.n	8003d08 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_RCC_OscConfig+0x65c>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fd f93c 	bl	8000f1c <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd f938 	bl	8000f1c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e027      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cba:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <HAL_RCC_OscConfig+0x658>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x5ec>
 8003cc6:	e01f      	b.n	8003d08 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e01a      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_RCC_OscConfig+0x658>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d10d      	bne.n	8003d04 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d106      	bne.n	8003d04 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	42470060 	.word	0x42470060

08003d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e11a      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d30:	4b8f      	ldr	r3, [pc, #572]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d919      	bls.n	8003d72 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d105      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x34>
 8003d44:	4b8a      	ldr	r3, [pc, #552]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a89      	ldr	r2, [pc, #548]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b87      	ldr	r3, [pc, #540]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 0201 	bic.w	r2, r3, #1
 8003d58:	4985      	ldr	r1, [pc, #532]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d60:	4b83      	ldr	r3, [pc, #524]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d001      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e0f9      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7e:	4b7d      	ldr	r3, [pc, #500]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	497a      	ldr	r1, [pc, #488]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 808e 	beq.w	8003eba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003da6:	4b73      	ldr	r3, [pc, #460]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d121      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e0d7      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dbe:	4b6d      	ldr	r3, [pc, #436]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d115      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0cb      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dd6:	4b67      	ldr	r3, [pc, #412]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e0bf      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003de6:	4b63      	ldr	r3, [pc, #396]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e0b7      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b5f      	ldr	r3, [pc, #380]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	495c      	ldr	r1, [pc, #368]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fd f888 	bl	8000f1c <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d112      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fd f880 	bl	8000f1c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e09b      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e2e:	4b51      	ldr	r3, [pc, #324]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d1ee      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xfc>
 8003e3a:	e03e      	b.n	8003eba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d112      	bne.n	8003e6a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e44:	e00a      	b.n	8003e5c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e46:	f7fd f869 	bl	8000f1c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e084      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e5c:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b0c      	cmp	r3, #12
 8003e66:	d1ee      	bne.n	8003e46 <HAL_RCC_ClockConfig+0x12a>
 8003e68:	e027      	b.n	8003eba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d11d      	bne.n	8003eae <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e74:	f7fd f852 	bl	8000f1c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e06d      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d1ee      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x158>
 8003e96:	e010      	b.n	8003eba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e98:	f7fd f840 	bl	8000f1c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e05b      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ee      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eba:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d219      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <HAL_RCC_ClockConfig+0x1be>
 8003ece:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 0201 	bic.w	r2, r3, #1
 8003ee2:	4923      	ldr	r1, [pc, #140]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <HAL_RCC_ClockConfig+0x254>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e034      	b.n	8003f66 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4917      	ldr	r1, [pc, #92]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f26:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	490f      	ldr	r1, [pc, #60]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f3a:	f000 f823 	bl	8003f84 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4601      	mov	r1, r0
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_RCC_ClockConfig+0x258>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	4a0b      	ldr	r2, [pc, #44]	; (8003f78 <HAL_RCC_ClockConfig+0x25c>)
 8003f4c:	5cd3      	ldrb	r3, [r2, r3]
 8003f4e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <HAL_RCC_ClockConfig+0x260>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <HAL_RCC_ClockConfig+0x264>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc ff92 	bl	8000e84 <HAL_InitTick>
 8003f60:	4603      	mov	r3, r0
 8003f62:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f64:	7afb      	ldrb	r3, [r7, #11]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023c00 	.word	0x40023c00
 8003f74:	40023800 	.word	0x40023800
 8003f78:	08008764 	.word	0x08008764
 8003f7c:	2000000c 	.word	0x2000000c
 8003f80:	20000010 	.word	0x20000010

08003f84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003f8a:	4b4b      	ldr	r3, [pc, #300]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d006      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x24>
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d007      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x2a>
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d176      	bne.n	8004090 <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa2:	4b46      	ldr	r3, [pc, #280]	; (80040bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003fa4:	613b      	str	r3, [r7, #16]
      break;
 8003fa6:	e081      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fa8:	4b45      	ldr	r3, [pc, #276]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003faa:	613b      	str	r3, [r7, #16]
      break;
 8003fac:	e07e      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	0c9b      	lsrs	r3, r3, #18
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	4a43      	ldr	r2, [pc, #268]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	0d9b      	lsrs	r3, r3, #22
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d019      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f04f 0400 	mov.w	r4, #0
 8003fda:	4a39      	ldr	r2, [pc, #228]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fdc:	fb02 f104 	mul.w	r1, r2, r4
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	fb02 f203 	mul.w	r2, r2, r3
 8003fe6:	440a      	add	r2, r1
 8003fe8:	4935      	ldr	r1, [pc, #212]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fea:	fba3 0101 	umull	r0, r1, r3, r1
 8003fee:	1853      	adds	r3, r2, r1
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f04f 0400 	mov.w	r4, #0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	f7fc f8be 	bl	800017c <__aeabi_uldivmod>
 8004000:	4603      	mov	r3, r0
 8004002:	460c      	mov	r4, r1
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e040      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	461d      	mov	r5, r3
 800400c:	f04f 0600 	mov.w	r6, #0
 8004010:	4629      	mov	r1, r5
 8004012:	4632      	mov	r2, r6
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	f04f 0400 	mov.w	r4, #0
 800401c:	0154      	lsls	r4, r2, #5
 800401e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004022:	014b      	lsls	r3, r1, #5
 8004024:	4619      	mov	r1, r3
 8004026:	4622      	mov	r2, r4
 8004028:	1b49      	subs	r1, r1, r5
 800402a:	eb62 0206 	sbc.w	r2, r2, r6
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	f04f 0400 	mov.w	r4, #0
 8004036:	0194      	lsls	r4, r2, #6
 8004038:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800403c:	018b      	lsls	r3, r1, #6
 800403e:	1a5b      	subs	r3, r3, r1
 8004040:	eb64 0402 	sbc.w	r4, r4, r2
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	00e2      	lsls	r2, r4, #3
 800404e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004052:	00d9      	lsls	r1, r3, #3
 8004054:	460b      	mov	r3, r1
 8004056:	4614      	mov	r4, r2
 8004058:	195b      	adds	r3, r3, r5
 800405a:	eb44 0406 	adc.w	r4, r4, r6
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	02a2      	lsls	r2, r4, #10
 8004068:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800406c:	0299      	lsls	r1, r3, #10
 800406e:	460b      	mov	r3, r1
 8004070:	4614      	mov	r4, r2
 8004072:	4618      	mov	r0, r3
 8004074:	4621      	mov	r1, r4
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f04f 0400 	mov.w	r4, #0
 800407c:	461a      	mov	r2, r3
 800407e:	4623      	mov	r3, r4
 8004080:	f7fc f87c 	bl	800017c <__aeabi_uldivmod>
 8004084:	4603      	mov	r3, r0
 8004086:	460c      	mov	r4, r1
 8004088:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	613b      	str	r3, [r7, #16]
      break;
 800408e:	e00d      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	0b5b      	lsrs	r3, r3, #13
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	613b      	str	r3, [r7, #16]
      break;
 80040aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ac:	693b      	ldr	r3, [r7, #16]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800
 80040bc:	00f42400 	.word	0x00f42400
 80040c0:	016e3600 	.word	0x016e3600
 80040c4:	08008758 	.word	0x08008758

080040c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80040d4:	4b29      	ldr	r3, [pc, #164]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d12c      	bne.n	800413a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040e0:	4b26      	ldr	r3, [pc, #152]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e016      	b.n	8004126 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b20      	ldr	r3, [pc, #128]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	4a1f      	ldr	r2, [pc, #124]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004102:	6253      	str	r3, [r2, #36]	; 0x24
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004118:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004124:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800412c:	d105      	bne.n	800413a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004134:	d101      	bne.n	800413a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004136:	2301      	movs	r3, #1
 8004138:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004140:	4b10      	ldr	r3, [pc, #64]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a0f      	ldr	r2, [pc, #60]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004146:	f043 0304 	orr.w	r3, r3, #4
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 0201 	bic.w	r2, r3, #1
 8004154:	490b      	ldr	r1, [pc, #44]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	429a      	cmp	r2, r3
 8004168:	d001      	beq.n	800416e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800
 8004180:	40007000 	.word	0x40007000
 8004184:	40023c00 	.word	0x40023c00

08004188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e031      	b.n	80041fe <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc fdaa 	bl	8000d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f000 fa28 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d001      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e03a      	b.n	8004296 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004240:	d00e      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x58>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <HAL_TIM_Base_Start_IT+0x98>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d009      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x58>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x58>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d111      	bne.n	8004284 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b06      	cmp	r3, #6
 8004270:	d010      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004282:	e007      	b.n	8004294 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40010800 	.word	0x40010800

080042ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d122      	bne.n	8004308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d11b      	bne.n	8004308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0202 	mvn.w	r2, #2
 80042d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f978 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f96b 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f97a 	bl	80045f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b04      	cmp	r3, #4
 8004314:	d122      	bne.n	800435c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d11b      	bne.n	800435c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0204 	mvn.w	r2, #4
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f94e 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f941 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f950 	bl	80045f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b08      	cmp	r3, #8
 8004368:	d122      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d11b      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0208 	mvn.w	r2, #8
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2204      	movs	r2, #4
 8004386:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f924 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f917 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f926 	bl	80045f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d122      	bne.n	8004404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d11b      	bne.n	8004404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0210 	mvn.w	r2, #16
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2208      	movs	r2, #8
 80043da:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f8fa 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f8ed 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8fc 	bl	80045f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0201 	mvn.w	r2, #1
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fc fb7e 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8d6 	bl	8004608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_TIM_ConfigClockSource+0x18>
 8004478:	2302      	movs	r3, #2
 800447a:	e0a6      	b.n	80045ca <HAL_TIM_ConfigClockSource+0x166>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800449a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d067      	beq.n	8004584 <HAL_TIM_ConfigClockSource+0x120>
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d80b      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x6c>
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d073      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x140>
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d802      	bhi.n	80044c6 <HAL_TIM_ConfigClockSource+0x62>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d06f      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044c4:	e078      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d06c      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x140>
 80044ca:	2b30      	cmp	r3, #48	; 0x30
 80044cc:	d06a      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044ce:	e073      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044d0:	2b70      	cmp	r3, #112	; 0x70
 80044d2:	d00d      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x8c>
 80044d4:	2b70      	cmp	r3, #112	; 0x70
 80044d6:	d804      	bhi.n	80044e2 <HAL_TIM_ConfigClockSource+0x7e>
 80044d8:	2b50      	cmp	r3, #80	; 0x50
 80044da:	d033      	beq.n	8004544 <HAL_TIM_ConfigClockSource+0xe0>
 80044dc:	2b60      	cmp	r3, #96	; 0x60
 80044de:	d041      	beq.n	8004564 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044e0:	e06a      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e6:	d066      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x152>
 80044e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ec:	d017      	beq.n	800451e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044ee:	e063      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6899      	ldr	r1, [r3, #8]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f000 f965 	bl	80047ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004512:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	609a      	str	r2, [r3, #8]
      break;
 800451c:	e04c      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6899      	ldr	r1, [r3, #8]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f000 f94e 	bl	80047ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004540:	609a      	str	r2, [r3, #8]
      break;
 8004542:	e039      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6859      	ldr	r1, [r3, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	461a      	mov	r2, r3
 8004552:	f000 f8c5 	bl	80046e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2150      	movs	r1, #80	; 0x50
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f91c 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8004562:	e029      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	461a      	mov	r2, r3
 8004572:	f000 f8e3 	bl	800473c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2160      	movs	r1, #96	; 0x60
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f90c 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8004582:	e019      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	461a      	mov	r2, r3
 8004592:	f000 f8a5 	bl	80046e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2140      	movs	r1, #64	; 0x40
 800459c:	4618      	mov	r0, r3
 800459e:	f000 f8fc 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 80045a2:	e009      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f000 f8f3 	bl	800479a <TIM_ITRx_SetConfig>
        break;
 80045b4:	e000      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80045b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
	...

0800461c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d007      	beq.n	8004644 <TIM_Base_SetConfig+0x28>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a25      	ldr	r2, [pc, #148]	; (80046cc <TIM_Base_SetConfig+0xb0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_Base_SetConfig+0x28>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a24      	ldr	r2, [pc, #144]	; (80046d0 <TIM_Base_SetConfig+0xb4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d108      	bne.n	8004656 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d013      	beq.n	8004686 <TIM_Base_SetConfig+0x6a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <TIM_Base_SetConfig+0xb0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00f      	beq.n	8004686 <TIM_Base_SetConfig+0x6a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <TIM_Base_SetConfig+0xb4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00b      	beq.n	8004686 <TIM_Base_SetConfig+0x6a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <TIM_Base_SetConfig+0xb8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <TIM_Base_SetConfig+0x6a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <TIM_Base_SetConfig+0xbc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_Base_SetConfig+0x6a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a16      	ldr	r2, [pc, #88]	; (80046dc <TIM_Base_SetConfig+0xc0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	615a      	str	r2, [r3, #20]
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40010800 	.word	0x40010800
 80046d8:	40010c00 	.word	0x40010c00
 80046dc:	40011000 	.word	0x40011000

080046e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 0201 	bic.w	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800470a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f023 030a 	bic.w	r3, r3, #10
 800471c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f023 0210 	bic.w	r2, r3, #16
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004766:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	031b      	lsls	r3, r3, #12
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr

0800479a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f043 0307 	orr.w	r3, r3, #7
 80047bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	609a      	str	r2, [r3, #8]
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b087      	sub	sp, #28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	021a      	lsls	r2, r3, #8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	609a      	str	r2, [r3, #8]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004820:	2302      	movs	r3, #2
 8004822:	e046      	b.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004866:	d00e      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a13      	ldr	r2, [pc, #76]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a10      	ldr	r2, [pc, #64]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10c      	bne.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800488c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	4313      	orrs	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40010800 	.word	0x40010800

080048c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80048dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004900:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	b29b      	uxth	r3, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	b29b      	uxth	r3, r3
 8004912:	4013      	ands	r3, r2
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004928:	b084      	sub	sp, #16
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	f107 0014 	add.w	r0, r7, #20
 8004936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	b004      	add	sp, #16
 8004966:	4770      	bx	lr

08004968 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004968:	b480      	push	{r7}
 800496a:	b09b      	sub	sp, #108	; 0x6c
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	78db      	ldrb	r3, [r3, #3]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d81f      	bhi.n	80049da <USB_ActivateEndpoint+0x72>
 800499a:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <USB_ActivateEndpoint+0x38>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	080049b1 	.word	0x080049b1
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049e3 	.word	0x080049e3
 80049ac:	080049bf 	.word	0x080049bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80049b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80049bc:	e012      	b.n	80049e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80049be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049c2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80049c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80049ca:	e00b      	b.n	80049e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80049cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80049d8:	e004      	b.n	80049e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80049e0:	e000      	b.n	80049e4 <USB_ActivateEndpoint+0x7c>
      break;
 80049e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	441a      	add	r2, r3
 80049ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	7b1b      	ldrb	r3, [r3, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 8149 	bne.w	8004ce8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8084 	beq.w	8004b68 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	4413      	add	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	011a      	lsls	r2, r3, #4
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	88db      	ldrh	r3, [r3, #6]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	81fb      	strh	r3, [r7, #14]
 8004aa2:	89fb      	ldrh	r3, [r7, #14]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01b      	beq.n	8004ae4 <USB_ActivateEndpoint+0x17c>
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	81bb      	strh	r3, [r7, #12]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	89bb      	ldrh	r3, [r7, #12]
 8004ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004adc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	78db      	ldrb	r3, [r3, #3]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d020      	beq.n	8004b2e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b02:	813b      	strh	r3, [r7, #8]
 8004b04:	893b      	ldrh	r3, [r7, #8]
 8004b06:	f083 0320 	eor.w	r3, r3, #32
 8004b0a:	813b      	strh	r3, [r7, #8]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	893b      	ldrh	r3, [r7, #8]
 8004b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	8013      	strh	r3, [r2, #0]
 8004b2c:	e27f      	b.n	800502e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b44:	817b      	strh	r3, [r7, #10]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	441a      	add	r2, r3
 8004b50:	897b      	ldrh	r3, [r7, #10]
 8004b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	8013      	strh	r3, [r2, #0]
 8004b66:	e262      	b.n	800502e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	4413      	add	r3, r2
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	011a      	lsls	r2, r3, #4
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	88db      	ldrh	r3, [r3, #6]
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	4413      	add	r3, r2
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	011a      	lsls	r2, r3, #4
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	4413      	add	r3, r2
 8004bba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bbe:	623b      	str	r3, [r7, #32]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d112      	bne.n	8004bee <USB_ActivateEndpoint+0x286>
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	e02f      	b.n	8004c4e <USB_ActivateEndpoint+0x2e6>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8004bf4:	d813      	bhi.n	8004c1e <USB_ActivateEndpoint+0x2b6>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <USB_ActivateEndpoint+0x2a8>
 8004c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	029b      	lsls	r3, r3, #10
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	e017      	b.n	8004c4e <USB_ActivateEndpoint+0x2e6>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	663b      	str	r3, [r7, #96]	; 0x60
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <USB_ActivateEndpoint+0x2d0>
 8004c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c34:	3b01      	subs	r3, #1
 8004c36:	663b      	str	r3, [r7, #96]	; 0x60
 8004c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	029b      	lsls	r3, r3, #10
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	83fb      	strh	r3, [r7, #30]
 8004c5c:	8bfb      	ldrh	r3, [r7, #30]
 8004c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01b      	beq.n	8004c9e <USB_ActivateEndpoint+0x336>
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7c:	83bb      	strh	r3, [r7, #28]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	441a      	add	r2, r3
 8004c88:	8bbb      	ldrh	r3, [r7, #28]
 8004c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb4:	837b      	strh	r3, [r7, #26]
 8004cb6:	8b7b      	ldrh	r3, [r7, #26]
 8004cb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cbc:	837b      	strh	r3, [r7, #26]
 8004cbe:	8b7b      	ldrh	r3, [r7, #26]
 8004cc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cc4:	837b      	strh	r3, [r7, #26]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	8b7b      	ldrh	r3, [r7, #26]
 8004cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]
 8004ce6:	e1a2      	b.n	800502e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	441a      	add	r2, r3
 8004d0c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d18:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d34:	4413      	add	r3, r2
 8004d36:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	011a      	lsls	r2, r3, #4
 8004d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d46:	657b      	str	r3, [r7, #84]	; 0x54
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	891b      	ldrh	r3, [r3, #8]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d68:	4413      	add	r3, r2
 8004d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	011a      	lsls	r2, r3, #4
 8004d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	895b      	ldrh	r3, [r3, #10]
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 8091 	bne.w	8004eb8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004da4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01b      	beq.n	8004de6 <USB_ActivateEndpoint+0x47e>
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	441a      	add	r2, r3
 8004dd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	873b      	strh	r3, [r7, #56]	; 0x38
 8004df4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01b      	beq.n	8004e36 <USB_ActivateEndpoint+0x4ce>
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e14:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e94:	867b      	strh	r3, [r7, #50]	; 0x32
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]
 8004eb6:	e0ba      	b.n	800502e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ec8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01d      	beq.n	8004f10 <USB_ActivateEndpoint+0x5a8>
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004f20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01d      	beq.n	8004f68 <USB_ActivateEndpoint+0x600>
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	78db      	ldrb	r3, [r3, #3]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d024      	beq.n	8004fba <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f8e:	f083 0320 	eor.w	r3, r3, #32
 8004f92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8013      	strh	r3, [r2, #0]
 8004fb8:	e01d      	b.n	8004ff6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800501a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502a:	b29b      	uxth	r3, r3
 800502c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800502e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005032:	4618      	mov	r0, r3
 8005034:	376c      	adds	r7, #108	; 0x6c
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800503c:	b480      	push	{r7}
 800503e:	b08d      	sub	sp, #52	; 0x34
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	7b1b      	ldrb	r3, [r3, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 808e 	bne.w	800516c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	785b      	ldrb	r3, [r3, #1]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d044      	beq.n	80050e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	81bb      	strh	r3, [r7, #12]
 8005066:	89bb      	ldrh	r3, [r7, #12]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01b      	beq.n	80050a8 <USB_DeactivateEndpoint+0x6c>
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	817b      	strh	r3, [r7, #10]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	897b      	ldrh	r3, [r7, #10]
 8005094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050be:	813b      	strh	r3, [r7, #8]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	893b      	ldrh	r3, [r7, #8]
 80050cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050dc:	b29b      	uxth	r3, r3
 80050de:	8013      	strh	r3, [r2, #0]
 80050e0:	e192      	b.n	8005408 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	827b      	strh	r3, [r7, #18]
 80050f0:	8a7b      	ldrh	r3, [r7, #18]
 80050f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01b      	beq.n	8005132 <USB_DeactivateEndpoint+0xf6>
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005110:	823b      	strh	r3, [r7, #16]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	8a3b      	ldrh	r3, [r7, #16]
 800511e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800512a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512e:	b29b      	uxth	r3, r3
 8005130:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005148:	81fb      	strh	r3, [r7, #14]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	89fb      	ldrh	r3, [r7, #14]
 8005156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005166:	b29b      	uxth	r3, r3
 8005168:	8013      	strh	r3, [r2, #0]
 800516a:	e14d      	b.n	8005408 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f040 80a5 	bne.w	80052c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	843b      	strh	r3, [r7, #32]
 8005184:	8c3b      	ldrh	r3, [r7, #32]
 8005186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01b      	beq.n	80051c6 <USB_DeactivateEndpoint+0x18a>
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a4:	83fb      	strh	r3, [r7, #30]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	441a      	add	r2, r3
 80051b0:	8bfb      	ldrh	r3, [r7, #30]
 80051b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	83bb      	strh	r3, [r7, #28]
 80051d4:	8bbb      	ldrh	r3, [r7, #28]
 80051d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01b      	beq.n	8005216 <USB_DeactivateEndpoint+0x1da>
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f4:	837b      	strh	r3, [r7, #26]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	441a      	add	r2, r3
 8005200:	8b7b      	ldrh	r3, [r7, #26]
 8005202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005212:	b29b      	uxth	r3, r3
 8005214:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522c:	833b      	strh	r3, [r7, #24]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	441a      	add	r2, r3
 8005238:	8b3b      	ldrh	r3, [r7, #24]
 800523a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005246:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800524a:	b29b      	uxth	r3, r3
 800524c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005264:	82fb      	strh	r3, [r7, #22]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	8afb      	ldrh	r3, [r7, #22]
 8005272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005282:	b29b      	uxth	r3, r3
 8005284:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529c:	82bb      	strh	r3, [r7, #20]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	8abb      	ldrh	r3, [r7, #20]
 80052aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8013      	strh	r3, [r2, #0]
 80052be:	e0a3      	b.n	8005408 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80052ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <USB_DeactivateEndpoint+0x2d4>
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530c:	b29b      	uxth	r3, r3
 800530e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800531e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01b      	beq.n	8005360 <USB_DeactivateEndpoint+0x324>
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	441a      	add	r2, r3
 800534a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800534c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005358:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800535c:	b29b      	uxth	r3, r3
 800535e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005376:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005394:	b29b      	uxth	r3, r3
 8005396:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005404:	b29b      	uxth	r3, r3
 8005406:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3734      	adds	r7, #52	; 0x34
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr

08005414 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b0c4      	sub	sp, #272	; 0x110
 8005418:	af00      	add	r7, sp, #0
 800541a:	1d3b      	adds	r3, r7, #4
 800541c:	6018      	str	r0, [r3, #0]
 800541e:	463b      	mov	r3, r7
 8005420:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005422:	463b      	mov	r3, r7
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b01      	cmp	r3, #1
 800542a:	f040 8566 	bne.w	8005efa <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	463b      	mov	r3, r7
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	429a      	cmp	r2, r3
 800543c:	d905      	bls.n	800544a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005448:	e004      	b.n	8005454 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800544a:	463b      	mov	r3, r7
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005454:	463b      	mov	r3, r7
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	7b1b      	ldrb	r3, [r3, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d12c      	bne.n	80054b8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800545e:	463b      	mov	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6959      	ldr	r1, [r3, #20]
 8005464:	463b      	mov	r3, r7
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	88da      	ldrh	r2, [r3, #6]
 800546a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800546e:	b29b      	uxth	r3, r3
 8005470:	1d38      	adds	r0, r7, #4
 8005472:	6800      	ldr	r0, [r0, #0]
 8005474:	f001 fa31 	bl	80068da <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005478:	1d3b      	adds	r3, r7, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005486:	b29b      	uxth	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	4413      	add	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	463b      	mov	r3, r7
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	011a      	lsls	r2, r3, #4
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	f107 0310 	add.w	r3, r7, #16
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	f000 bcec 	b.w	8005e90 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80054b8:	463b      	mov	r3, r7
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	f040 8356 	bne.w	8005b70 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6a1a      	ldr	r2, [r3, #32]
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	f240 82fa 	bls.w	8005aca <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	463b      	mov	r3, r7
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80054f4:	1d3b      	adds	r3, r7, #4
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	463b      	mov	r3, r7
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800551a:	463b      	mov	r3, r7
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005524:	463b      	mov	r3, r7
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a1a      	ldr	r2, [r3, #32]
 800552a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	463b      	mov	r3, r7
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 815e 	beq.w	800580e <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005552:	1d3b      	adds	r3, r7, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	637b      	str	r3, [r7, #52]	; 0x34
 8005558:	463b      	mov	r3, r7
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d164      	bne.n	800562c <USB_EPStartXfer+0x218>
 8005562:	1d3b      	adds	r3, r7, #4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005570:	b29b      	uxth	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	4413      	add	r3, r2
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	011a      	lsls	r2, r3, #4
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	4413      	add	r3, r2
 8005586:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800558a:	62bb      	str	r3, [r7, #40]	; 0x28
 800558c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005590:	2b00      	cmp	r3, #0
 8005592:	d112      	bne.n	80055ba <USB_EPStartXfer+0x1a6>
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800559e:	b29a      	uxth	r2, r3
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	e054      	b.n	8005664 <USB_EPStartXfer+0x250>
 80055ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055be:	2b3e      	cmp	r3, #62	; 0x3e
 80055c0:	d817      	bhi.n	80055f2 <USB_EPStartXfer+0x1de>
 80055c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <USB_EPStartXfer+0x1ce>
 80055d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055dc:	3301      	adds	r3, #1
 80055de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	029b      	lsls	r3, r3, #10
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	e038      	b.n	8005664 <USB_EPStartXfer+0x250>
 80055f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005600:	f003 031f 	and.w	r3, r3, #31
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <USB_EPStartXfer+0x1fe>
 8005608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560c:	3b01      	subs	r3, #1
 800560e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005616:	b29b      	uxth	r3, r3
 8005618:	029b      	lsls	r3, r3, #10
 800561a:	b29b      	uxth	r3, r3
 800561c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005624:	b29a      	uxth	r2, r3
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e01b      	b.n	8005664 <USB_EPStartXfer+0x250>
 800562c:	463b      	mov	r3, r7
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d116      	bne.n	8005664 <USB_EPStartXfer+0x250>
 8005636:	1d3b      	adds	r3, r7, #4
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563e:	b29b      	uxth	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	4413      	add	r3, r2
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	463b      	mov	r3, r7
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	011a      	lsls	r2, r3, #4
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	4413      	add	r3, r2
 8005654:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005658:	633b      	str	r3, [r7, #48]	; 0x30
 800565a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800565e:	b29a      	uxth	r2, r3
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	895b      	ldrh	r3, [r3, #10]
 800566a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6959      	ldr	r1, [r3, #20]
 8005674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005678:	b29b      	uxth	r3, r3
 800567a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800567e:	1d38      	adds	r0, r7, #4
 8005680:	6800      	ldr	r0, [r0, #0]
 8005682:	f001 f92a 	bl	80068da <USB_WritePMA>
            ep->xfer_buff += len;
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695a      	ldr	r2, [r3, #20]
 800568c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005690:	441a      	add	r2, r3
 8005692:	463b      	mov	r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005698:	463b      	mov	r3, r7
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6a1a      	ldr	r2, [r3, #32]
 800569e:	463b      	mov	r3, r7
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d90e      	bls.n	80056c6 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80056a8:	463b      	mov	r3, r7
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80056b2:	463b      	mov	r3, r7
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056bc:	1ad2      	subs	r2, r2, r3
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	621a      	str	r2, [r3, #32]
 80056c4:	e008      	b.n	80056d8 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80056c6:	463b      	mov	r3, r7
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80056d0:	463b      	mov	r3, r7
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2200      	movs	r2, #0
 80056d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056d8:	463b      	mov	r3, r7
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d164      	bne.n	80057ac <USB_EPStartXfer+0x398>
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4413      	add	r3, r2
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	011a      	lsls	r2, r3, #4
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005710:	2b00      	cmp	r3, #0
 8005712:	d112      	bne.n	800573a <USB_EPStartXfer+0x326>
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800571e:	b29a      	uxth	r2, r3
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29b      	uxth	r3, r3
 800572a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005732:	b29a      	uxth	r2, r3
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	e057      	b.n	80057ea <USB_EPStartXfer+0x3d6>
 800573a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800573e:	2b3e      	cmp	r3, #62	; 0x3e
 8005740:	d817      	bhi.n	8005772 <USB_EPStartXfer+0x35e>
 8005742:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800574c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <USB_EPStartXfer+0x34e>
 8005758:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800575c:	3301      	adds	r3, #1
 800575e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005762:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005766:	b29b      	uxth	r3, r3
 8005768:	029b      	lsls	r3, r3, #10
 800576a:	b29a      	uxth	r2, r3
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	801a      	strh	r2, [r3, #0]
 8005770:	e03b      	b.n	80057ea <USB_EPStartXfer+0x3d6>
 8005772:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800577c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	2b00      	cmp	r3, #0
 8005786:	d104      	bne.n	8005792 <USB_EPStartXfer+0x37e>
 8005788:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800578c:	3b01      	subs	r3, #1
 800578e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005792:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005796:	b29b      	uxth	r3, r3
 8005798:	029b      	lsls	r3, r3, #10
 800579a:	b29b      	uxth	r3, r3
 800579c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	801a      	strh	r2, [r3, #0]
 80057aa:	e01e      	b.n	80057ea <USB_EPStartXfer+0x3d6>
 80057ac:	463b      	mov	r3, r7
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d119      	bne.n	80057ea <USB_EPStartXfer+0x3d6>
 80057b6:	1d3b      	adds	r3, r7, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	4413      	add	r3, r2
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	011a      	lsls	r2, r3, #4
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	4413      	add	r3, r2
 80057da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057de:	623b      	str	r3, [r7, #32]
 80057e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057ea:	463b      	mov	r3, r7
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	891b      	ldrh	r3, [r3, #8]
 80057f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057f4:	463b      	mov	r3, r7
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6959      	ldr	r1, [r3, #20]
 80057fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005804:	1d38      	adds	r0, r7, #4
 8005806:	6800      	ldr	r0, [r0, #0]
 8005808:	f001 f867 	bl	80068da <USB_WritePMA>
 800580c:	e340      	b.n	8005e90 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d164      	bne.n	80058e2 <USB_EPStartXfer+0x4ce>
 8005818:	1d3b      	adds	r3, r7, #4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800581e:	1d3b      	adds	r3, r7, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005826:	b29b      	uxth	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582c:	4413      	add	r3, r2
 800582e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005830:	463b      	mov	r3, r7
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	011a      	lsls	r2, r3, #4
 8005838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583a:	4413      	add	r3, r2
 800583c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005840:	64bb      	str	r3, [r7, #72]	; 0x48
 8005842:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005846:	2b00      	cmp	r3, #0
 8005848:	d112      	bne.n	8005870 <USB_EPStartXfer+0x45c>
 800584a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005854:	b29a      	uxth	r2, r3
 8005856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005868:	b29a      	uxth	r2, r3
 800586a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e057      	b.n	8005920 <USB_EPStartXfer+0x50c>
 8005870:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005874:	2b3e      	cmp	r3, #62	; 0x3e
 8005876:	d817      	bhi.n	80058a8 <USB_EPStartXfer+0x494>
 8005878:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005882:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <USB_EPStartXfer+0x484>
 800588e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005892:	3301      	adds	r3, #1
 8005894:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800589c:	b29b      	uxth	r3, r3
 800589e:	029b      	lsls	r3, r3, #10
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	e03b      	b.n	8005920 <USB_EPStartXfer+0x50c>
 80058a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <USB_EPStartXfer+0x4b4>
 80058be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058c2:	3b01      	subs	r3, #1
 80058c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	029b      	lsls	r3, r3, #10
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058da:	b29a      	uxth	r2, r3
 80058dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058de:	801a      	strh	r2, [r3, #0]
 80058e0:	e01e      	b.n	8005920 <USB_EPStartXfer+0x50c>
 80058e2:	463b      	mov	r3, r7
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d119      	bne.n	8005920 <USB_EPStartXfer+0x50c>
 80058ec:	1d3b      	adds	r3, r7, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	657b      	str	r3, [r7, #84]	; 0x54
 80058f2:	1d3b      	adds	r3, r7, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	461a      	mov	r2, r3
 80058fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005900:	4413      	add	r3, r2
 8005902:	657b      	str	r3, [r7, #84]	; 0x54
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	011a      	lsls	r2, r3, #4
 800590c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800590e:	4413      	add	r3, r2
 8005910:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005914:	653b      	str	r3, [r7, #80]	; 0x50
 8005916:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800591a:	b29a      	uxth	r2, r3
 800591c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	891b      	ldrh	r3, [r3, #8]
 8005926:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800592a:	463b      	mov	r3, r7
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6959      	ldr	r1, [r3, #20]
 8005930:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005934:	b29b      	uxth	r3, r3
 8005936:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800593a:	1d38      	adds	r0, r7, #4
 800593c:	6800      	ldr	r0, [r0, #0]
 800593e:	f000 ffcc 	bl	80068da <USB_WritePMA>
            ep->xfer_buff += len;
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800594c:	441a      	add	r2, r3
 800594e:	463b      	mov	r3, r7
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005954:	463b      	mov	r3, r7
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	463b      	mov	r3, r7
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	429a      	cmp	r2, r3
 8005962:	d90e      	bls.n	8005982 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005964:	463b      	mov	r3, r7
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800596e:	463b      	mov	r3, r7
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005978:	1ad2      	subs	r2, r2, r3
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	621a      	str	r2, [r3, #32]
 8005980:	e008      	b.n	8005994 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005982:	463b      	mov	r3, r7
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800598c:	463b      	mov	r3, r7
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2200      	movs	r2, #0
 8005992:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005994:	1d3b      	adds	r3, r7, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	647b      	str	r3, [r7, #68]	; 0x44
 800599a:	463b      	mov	r3, r7
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d164      	bne.n	8005a6e <USB_EPStartXfer+0x65a>
 80059a4:	1d3b      	adds	r3, r7, #4
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059aa:	1d3b      	adds	r3, r7, #4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b8:	4413      	add	r3, r2
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059bc:	463b      	mov	r3, r7
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	011a      	lsls	r2, r3, #4
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d112      	bne.n	80059fc <USB_EPStartXfer+0x5e8>
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	e054      	b.n	8005aa6 <USB_EPStartXfer+0x692>
 80059fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a00:	2b3e      	cmp	r3, #62	; 0x3e
 8005a02:	d817      	bhi.n	8005a34 <USB_EPStartXfer+0x620>
 8005a04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <USB_EPStartXfer+0x610>
 8005a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	029b      	lsls	r3, r3, #10
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	e038      	b.n	8005aa6 <USB_EPStartXfer+0x692>
 8005a34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d104      	bne.n	8005a54 <USB_EPStartXfer+0x640>
 8005a4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	e01b      	b.n	8005aa6 <USB_EPStartXfer+0x692>
 8005a6e:	463b      	mov	r3, r7
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d116      	bne.n	8005aa6 <USB_EPStartXfer+0x692>
 8005a78:	1d3b      	adds	r3, r7, #4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a86:	4413      	add	r3, r2
 8005a88:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	011a      	lsls	r2, r3, #4
 8005a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a94:	4413      	add	r3, r2
 8005a96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	895b      	ldrh	r3, [r3, #10]
 8005aac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6959      	ldr	r1, [r3, #20]
 8005ab6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005ac0:	1d38      	adds	r0, r7, #4
 8005ac2:	6800      	ldr	r0, [r0, #0]
 8005ac4:	f000 ff09 	bl	80068da <USB_WritePMA>
 8005ac8:	e1e2      	b.n	8005e90 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005aca:	463b      	mov	r3, r7
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005af2:	1d3b      	adds	r3, r7, #4
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	441a      	add	r2, r3
 8005b00:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b18:	1d3b      	adds	r3, r7, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b2c:	4413      	add	r3, r2
 8005b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b30:	463b      	mov	r3, r7
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	011a      	lsls	r2, r3, #4
 8005b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	891b      	ldrh	r3, [r3, #8]
 8005b52:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b56:	463b      	mov	r3, r7
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6959      	ldr	r1, [r3, #20]
 8005b5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005b66:	1d38      	adds	r0, r7, #4
 8005b68:	6800      	ldr	r0, [r0, #0]
 8005b6a:	f000 feb6 	bl	80068da <USB_WritePMA>
 8005b6e:	e18f      	b.n	8005e90 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	463b      	mov	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 808f 	beq.w	8005caa <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b92:	463b      	mov	r3, r7
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d164      	bne.n	8005c66 <USB_EPStartXfer+0x852>
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	673b      	str	r3, [r7, #112]	; 0x70
 8005ba2:	1d3b      	adds	r3, r7, #4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb0:	4413      	add	r3, r2
 8005bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	011a      	lsls	r2, r3, #4
 8005bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d112      	bne.n	8005bf4 <USB_EPStartXfer+0x7e0>
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e054      	b.n	8005c9e <USB_EPStartXfer+0x88a>
 8005bf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bf8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bfa:	d817      	bhi.n	8005c2c <USB_EPStartXfer+0x818>
 8005bfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c00:	085b      	lsrs	r3, r3, #1
 8005c02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <USB_EPStartXfer+0x808>
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c16:	3301      	adds	r3, #1
 8005c18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	801a      	strh	r2, [r3, #0]
 8005c2a:	e038      	b.n	8005c9e <USB_EPStartXfer+0x88a>
 8005c2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <USB_EPStartXfer+0x838>
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c46:	3b01      	subs	r3, #1
 8005c48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	029b      	lsls	r3, r3, #10
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	e01b      	b.n	8005c9e <USB_EPStartXfer+0x88a>
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d116      	bne.n	8005c9e <USB_EPStartXfer+0x88a>
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7e:	4413      	add	r3, r2
 8005c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	011a      	lsls	r2, r3, #4
 8005c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c92:	677b      	str	r3, [r7, #116]	; 0x74
 8005c94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	895b      	ldrh	r3, [r3, #10]
 8005ca4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005ca8:	e097      	b.n	8005dda <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d168      	bne.n	8005d86 <USB_EPStartXfer+0x972>
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cbc:	1d3b      	adds	r3, r7, #4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ccc:	4413      	add	r3, r2
 8005cce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	011a      	lsls	r2, r3, #4
 8005cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cde:	4413      	add	r3, r2
 8005ce0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ce4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ce6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d112      	bne.n	8005d14 <USB_EPStartXfer+0x900>
 8005cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	e05d      	b.n	8005dd0 <USB_EPStartXfer+0x9bc>
 8005d14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d18:	2b3e      	cmp	r3, #62	; 0x3e
 8005d1a:	d817      	bhi.n	8005d4c <USB_EPStartXfer+0x938>
 8005d1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <USB_EPStartXfer+0x928>
 8005d32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d36:	3301      	adds	r3, #1
 8005d38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	029b      	lsls	r3, r3, #10
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	e041      	b.n	8005dd0 <USB_EPStartXfer+0x9bc>
 8005d4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <USB_EPStartXfer+0x958>
 8005d62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d66:	3b01      	subs	r3, #1
 8005d68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	029b      	lsls	r3, r3, #10
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	e024      	b.n	8005dd0 <USB_EPStartXfer+0x9bc>
 8005d86:	463b      	mov	r3, r7
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d11f      	bne.n	8005dd0 <USB_EPStartXfer+0x9bc>
 8005d90:	1d3b      	adds	r3, r7, #4
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d98:	1d3b      	adds	r3, r7, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005da8:	4413      	add	r3, r2
 8005daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dae:	463b      	mov	r3, r7
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	011a      	lsls	r2, r3, #4
 8005db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dba:	4413      	add	r3, r2
 8005dbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	891b      	ldrh	r3, [r3, #8]
 8005dd6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dda:	463b      	mov	r3, r7
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6959      	ldr	r1, [r3, #20]
 8005de0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005dea:	1d38      	adds	r0, r7, #4
 8005dec:	6800      	ldr	r0, [r0, #0]
 8005dee:	f000 fd74 	bl	80068da <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005df2:	463b      	mov	r3, r7
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d122      	bne.n	8005e42 <USB_EPStartXfer+0xa2e>
 8005dfc:	1d3b      	adds	r3, r7, #4
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	463b      	mov	r3, r7
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005e1a:	1d3b      	adds	r3, r7, #4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	463b      	mov	r3, r7
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	441a      	add	r2, r3
 8005e28:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	8013      	strh	r3, [r2, #0]
 8005e40:	e026      	b.n	8005e90 <USB_EPStartXfer+0xa7c>
 8005e42:	463b      	mov	r3, r7
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d121      	bne.n	8005e90 <USB_EPStartXfer+0xa7c>
 8005e4c:	1d3b      	adds	r3, r7, #4
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	463b      	mov	r3, r7
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	463b      	mov	r3, r7
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e90:	1d3b      	adds	r3, r7, #4
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	463b      	mov	r3, r7
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f107 020e 	add.w	r2, r7, #14
 8005ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eae:	8013      	strh	r3, [r2, #0]
 8005eb0:	f107 030e 	add.w	r3, r7, #14
 8005eb4:	f107 020e 	add.w	r2, r7, #14
 8005eb8:	8812      	ldrh	r2, [r2, #0]
 8005eba:	f082 0210 	eor.w	r2, r2, #16
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	f107 030e 	add.w	r3, r7, #14
 8005ec4:	f107 020e 	add.w	r2, r7, #14
 8005ec8:	8812      	ldrh	r2, [r2, #0]
 8005eca:	f082 0220 	eor.w	r2, r2, #32
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	1d3b      	adds	r3, r7, #4
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	441a      	add	r2, r3
 8005ede:	f107 030e 	add.w	r3, r7, #14
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	8013      	strh	r3, [r2, #0]
 8005ef8:	e3b5      	b.n	8006666 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005efa:	463b      	mov	r3, r7
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	7b1b      	ldrb	r3, [r3, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f040 8090 	bne.w	8006026 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8005f06:	463b      	mov	r3, r7
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d90e      	bls.n	8005f34 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8005f16:	463b      	mov	r3, r7
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8005f20:	463b      	mov	r3, r7
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	619a      	str	r2, [r3, #24]
 8005f32:	e008      	b.n	8005f46 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2200      	movs	r2, #0
 8005f44:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f46:	1d3b      	adds	r3, r7, #4
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f4e:	1d3b      	adds	r3, r7, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f5e:	4413      	add	r3, r2
 8005f60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f64:	463b      	mov	r3, r7
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	011a      	lsls	r2, r3, #4
 8005f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f70:	4413      	add	r3, r2
 8005f72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d116      	bne.n	8005fb0 <USB_EPStartXfer+0xb9c>
 8005f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fac:	801a      	strh	r2, [r3, #0]
 8005fae:	e32c      	b.n	800660a <USB_EPStartXfer+0x11f6>
 8005fb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fb4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fb6:	d818      	bhi.n	8005fea <USB_EPStartXfer+0xbd6>
 8005fb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d004      	beq.n	8005fd8 <USB_EPStartXfer+0xbc4>
 8005fce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	029b      	lsls	r3, r3, #10
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	e30f      	b.n	800660a <USB_EPStartXfer+0x11f6>
 8005fea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <USB_EPStartXfer+0xbf6>
 8006000:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006004:	3b01      	subs	r3, #1
 8006006:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800600a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800600e:	b29b      	uxth	r3, r3
 8006010:	029b      	lsls	r3, r3, #10
 8006012:	b29b      	uxth	r3, r3
 8006014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601c:	b29a      	uxth	r2, r3
 800601e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e2f1      	b.n	800660a <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006026:	463b      	mov	r3, r7
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	78db      	ldrb	r3, [r3, #3]
 800602c:	2b02      	cmp	r3, #2
 800602e:	f040 818f 	bne.w	8006350 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006032:	463b      	mov	r3, r7
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d175      	bne.n	8006128 <USB_EPStartXfer+0xd14>
 800603c:	1d3b      	adds	r3, r7, #4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604c:	b29b      	uxth	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006054:	4413      	add	r3, r2
 8006056:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800605a:	463b      	mov	r3, r7
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	011a      	lsls	r2, r3, #4
 8006062:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006066:	4413      	add	r3, r2
 8006068:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800606c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006070:	463b      	mov	r3, r7
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d116      	bne.n	80060a8 <USB_EPStartXfer+0xc94>
 800607a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b29b      	uxth	r3, r3
 8006082:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006086:	b29a      	uxth	r2, r3
 8006088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609e:	b29a      	uxth	r2, r3
 80060a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	e065      	b.n	8006174 <USB_EPStartXfer+0xd60>
 80060a8:	463b      	mov	r3, r7
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b3e      	cmp	r3, #62	; 0x3e
 80060b0:	d81a      	bhi.n	80060e8 <USB_EPStartXfer+0xcd4>
 80060b2:	463b      	mov	r3, r7
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060be:	463b      	mov	r3, r7
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <USB_EPStartXfer+0xcc2>
 80060cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060d0:	3301      	adds	r3, #1
 80060d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060da:	b29b      	uxth	r3, r3
 80060dc:	029b      	lsls	r3, r3, #10
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	e045      	b.n	8006174 <USB_EPStartXfer+0xd60>
 80060e8:	463b      	mov	r3, r7
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060f4:	463b      	mov	r3, r7
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d104      	bne.n	800610c <USB_EPStartXfer+0xcf8>
 8006102:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006106:	3b01      	subs	r3, #1
 8006108:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800610c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006110:	b29b      	uxth	r3, r3
 8006112:	029b      	lsls	r3, r3, #10
 8006114:	b29b      	uxth	r3, r3
 8006116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611e:	b29a      	uxth	r2, r3
 8006120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	e025      	b.n	8006174 <USB_EPStartXfer+0xd60>
 8006128:	463b      	mov	r3, r7
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d120      	bne.n	8006174 <USB_EPStartXfer+0xd60>
 8006132:	1d3b      	adds	r3, r7, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800613a:	1d3b      	adds	r3, r7, #4
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006142:	b29b      	uxth	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800614a:	4413      	add	r3, r2
 800614c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	011a      	lsls	r2, r3, #4
 8006158:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800615c:	4413      	add	r3, r2
 800615e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006166:	463b      	mov	r3, r7
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	b29a      	uxth	r2, r3
 800616e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006172:	801a      	strh	r2, [r3, #0]
 8006174:	1d3b      	adds	r3, r7, #4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800617c:	463b      	mov	r3, r7
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d175      	bne.n	8006272 <USB_EPStartXfer+0xe5e>
 8006186:	1d3b      	adds	r3, r7, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800618e:	1d3b      	adds	r3, r7, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006196:	b29b      	uxth	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800619e:	4413      	add	r3, r2
 80061a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061a4:	463b      	mov	r3, r7
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	011a      	lsls	r2, r3, #4
 80061ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061b0:	4413      	add	r3, r2
 80061b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061ba:	463b      	mov	r3, r7
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d116      	bne.n	80061f2 <USB_EPStartXfer+0xdde>
 80061c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	e061      	b.n	80062b6 <USB_EPStartXfer+0xea2>
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	2b3e      	cmp	r3, #62	; 0x3e
 80061fa:	d81a      	bhi.n	8006232 <USB_EPStartXfer+0xe1e>
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006208:	463b      	mov	r3, r7
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <USB_EPStartXfer+0xe0c>
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621a:	3301      	adds	r3, #1
 800621c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006224:	b29b      	uxth	r3, r3
 8006226:	029b      	lsls	r3, r3, #10
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e041      	b.n	80062b6 <USB_EPStartXfer+0xea2>
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800623e:	463b      	mov	r3, r7
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <USB_EPStartXfer+0xe42>
 800624c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006250:	3b01      	subs	r3, #1
 8006252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625a:	b29b      	uxth	r3, r3
 800625c:	029b      	lsls	r3, r3, #10
 800625e:	b29b      	uxth	r3, r3
 8006260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e021      	b.n	80062b6 <USB_EPStartXfer+0xea2>
 8006272:	463b      	mov	r3, r7
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d11c      	bne.n	80062b6 <USB_EPStartXfer+0xea2>
 800627c:	1d3b      	adds	r3, r7, #4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006284:	b29b      	uxth	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800628c:	4413      	add	r3, r2
 800628e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006292:	463b      	mov	r3, r7
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	011a      	lsls	r2, r3, #4
 800629a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800629e:	4413      	add	r3, r2
 80062a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062a8:	463b      	mov	r3, r7
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062b4:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80062b6:	463b      	mov	r3, r7
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 81a4 	beq.w	800660a <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80062c2:	1d3b      	adds	r3, r7, #4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	463b      	mov	r3, r7
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80062da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <USB_EPStartXfer+0xeda>
 80062e2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10d      	bne.n	800630a <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062ee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80062f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f040 8187 	bne.w	800660a <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 8180 	bne.w	800660a <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800630a:	1d3b      	adds	r3, r7, #4
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	463b      	mov	r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006324:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006328:	1d3b      	adds	r3, r7, #4
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	463b      	mov	r3, r7
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	441a      	add	r2, r3
 8006336:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800633a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006346:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800634a:	b29b      	uxth	r3, r3
 800634c:	8013      	strh	r3, [r2, #0]
 800634e:	e15c      	b.n	800660a <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006350:	463b      	mov	r3, r7
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	78db      	ldrb	r3, [r3, #3]
 8006356:	2b01      	cmp	r3, #1
 8006358:	f040 8155 	bne.w	8006606 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800635c:	463b      	mov	r3, r7
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	463b      	mov	r3, r7
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	429a      	cmp	r2, r3
 800636a:	d90e      	bls.n	800638a <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800636c:	463b      	mov	r3, r7
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006376:	463b      	mov	r3, r7
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006380:	1ad2      	subs	r2, r2, r3
 8006382:	463b      	mov	r3, r7
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	619a      	str	r2, [r3, #24]
 8006388:	e008      	b.n	800639c <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800638a:	463b      	mov	r3, r7
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8006394:	463b      	mov	r3, r7
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2200      	movs	r2, #0
 800639a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800639c:	463b      	mov	r3, r7
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d16f      	bne.n	8006486 <USB_EPStartXfer+0x1072>
 80063a6:	1d3b      	adds	r3, r7, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063ae:	1d3b      	adds	r3, r7, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063be:	4413      	add	r3, r2
 80063c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063c4:	463b      	mov	r3, r7
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	011a      	lsls	r2, r3, #4
 80063cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063d0:	4413      	add	r3, r2
 80063d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d116      	bne.n	8006410 <USB_EPStartXfer+0xffc>
 80063e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063f4:	801a      	strh	r2, [r3, #0]
 80063f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006406:	b29a      	uxth	r2, r3
 8006408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	e05f      	b.n	80064d0 <USB_EPStartXfer+0x10bc>
 8006410:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006414:	2b3e      	cmp	r3, #62	; 0x3e
 8006416:	d818      	bhi.n	800644a <USB_EPStartXfer+0x1036>
 8006418:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006422:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <USB_EPStartXfer+0x1024>
 800642e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006432:	3301      	adds	r3, #1
 8006434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800643c:	b29b      	uxth	r3, r3
 800643e:	029b      	lsls	r3, r3, #10
 8006440:	b29a      	uxth	r2, r3
 8006442:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	e042      	b.n	80064d0 <USB_EPStartXfer+0x10bc>
 800644a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006454:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <USB_EPStartXfer+0x1056>
 8006460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006464:	3b01      	subs	r3, #1
 8006466:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800646a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646e:	b29b      	uxth	r3, r3
 8006470:	029b      	lsls	r3, r3, #10
 8006472:	b29b      	uxth	r3, r3
 8006474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647c:	b29a      	uxth	r2, r3
 800647e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	e024      	b.n	80064d0 <USB_EPStartXfer+0x10bc>
 8006486:	463b      	mov	r3, r7
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d11f      	bne.n	80064d0 <USB_EPStartXfer+0x10bc>
 8006490:	1d3b      	adds	r3, r7, #4
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006498:	1d3b      	adds	r3, r7, #4
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a8:	4413      	add	r3, r2
 80064aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	011a      	lsls	r2, r3, #4
 80064b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ba:	4413      	add	r3, r2
 80064bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80064c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	1d3b      	adds	r3, r7, #4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d16f      	bne.n	80065c2 <USB_EPStartXfer+0x11ae>
 80064e2:	1d3b      	adds	r3, r7, #4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064ea:	1d3b      	adds	r3, r7, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064fa:	4413      	add	r3, r2
 80064fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006500:	463b      	mov	r3, r7
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	011a      	lsls	r2, r3, #4
 8006508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800650c:	4413      	add	r3, r2
 800650e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006516:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800651a:	2b00      	cmp	r3, #0
 800651c:	d116      	bne.n	800654c <USB_EPStartXfer+0x1138>
 800651e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800652a:	b29a      	uxth	r2, r3
 800652c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006542:	b29a      	uxth	r2, r3
 8006544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	e05e      	b.n	800660a <USB_EPStartXfer+0x11f6>
 800654c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006550:	2b3e      	cmp	r3, #62	; 0x3e
 8006552:	d818      	bhi.n	8006586 <USB_EPStartXfer+0x1172>
 8006554:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800655e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <USB_EPStartXfer+0x1160>
 800656a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656e:	3301      	adds	r3, #1
 8006570:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006578:	b29b      	uxth	r3, r3
 800657a:	029b      	lsls	r3, r3, #10
 800657c:	b29a      	uxth	r2, r3
 800657e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	e041      	b.n	800660a <USB_EPStartXfer+0x11f6>
 8006586:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006594:	f003 031f 	and.w	r3, r3, #31
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <USB_EPStartXfer+0x1192>
 800659c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a0:	3b01      	subs	r3, #1
 80065a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	029b      	lsls	r3, r3, #10
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065be:	801a      	strh	r2, [r3, #0]
 80065c0:	e023      	b.n	800660a <USB_EPStartXfer+0x11f6>
 80065c2:	463b      	mov	r3, r7
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d11e      	bne.n	800660a <USB_EPStartXfer+0x11f6>
 80065cc:	1d3b      	adds	r3, r7, #4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065dc:	4413      	add	r3, r2
 80065de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065e2:	463b      	mov	r3, r7
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	011a      	lsls	r2, r3, #4
 80065ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065ee:	4413      	add	r3, r2
 80065f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	e001      	b.n	800660a <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e02e      	b.n	8006668 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800660a:	1d3b      	adds	r3, r7, #4
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006624:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006628:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800662c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006630:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006634:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006638:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800663c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	463b      	mov	r3, r7
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800665a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d020      	beq.n	80066c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669a:	81bb      	strh	r3, [r7, #12]
 800669c:	89bb      	ldrh	r3, [r7, #12]
 800669e:	f083 0310 	eor.w	r3, r3, #16
 80066a2:	81bb      	strh	r3, [r7, #12]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	441a      	add	r2, r3
 80066ae:	89bb      	ldrh	r3, [r7, #12]
 80066b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	8013      	strh	r3, [r2, #0]
 80066c4:	e01f      	b.n	8006706 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066dc:	81fb      	strh	r3, [r7, #14]
 80066de:	89fb      	ldrh	r3, [r7, #14]
 80066e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066e4:	81fb      	strh	r3, [r7, #14]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	89fb      	ldrh	r3, [r7, #14]
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006712:	b480      	push	{r7}
 8006714:	b087      	sub	sp, #28
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	7b1b      	ldrb	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f040 809d 	bne.w	8006860 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d04c      	beq.n	80067c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	823b      	strh	r3, [r7, #16]
 800673c:	8a3b      	ldrh	r3, [r7, #16]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01b      	beq.n	800677e <USB_EPClearStall+0x6c>
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675c:	81fb      	strh	r3, [r7, #14]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	441a      	add	r2, r3
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006776:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800677a:	b29b      	uxth	r3, r3
 800677c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	78db      	ldrb	r3, [r3, #3]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d06c      	beq.n	8006860 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800679c:	81bb      	strh	r3, [r7, #12]
 800679e:	89bb      	ldrh	r3, [r7, #12]
 80067a0:	f083 0320 	eor.w	r3, r3, #32
 80067a4:	81bb      	strh	r3, [r7, #12]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	441a      	add	r2, r3
 80067b0:	89bb      	ldrh	r3, [r7, #12]
 80067b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	8013      	strh	r3, [r2, #0]
 80067c6:	e04b      	b.n	8006860 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	82fb      	strh	r3, [r7, #22]
 80067d6:	8afb      	ldrh	r3, [r7, #22]
 80067d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01b      	beq.n	8006818 <USB_EPClearStall+0x106>
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	82bb      	strh	r3, [r7, #20]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	8abb      	ldrh	r3, [r7, #20]
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	827b      	strh	r3, [r7, #18]
 8006830:	8a7b      	ldrh	r3, [r7, #18]
 8006832:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006836:	827b      	strh	r3, [r7, #18]
 8006838:	8a7b      	ldrh	r3, [r7, #18]
 800683a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800683e:	827b      	strh	r3, [r7, #18]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	8a7b      	ldrh	r3, [r7, #18]
 800684c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685c:	b29b      	uxth	r3, r3
 800685e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr

0800686c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2280      	movs	r2, #128	; 0x80
 8006882:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr

08006892 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr

080068a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80068b8:	68fb      	ldr	r3, [r7, #12]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	bc80      	pop	{r7}
 80068c2:	4770      	bx	lr

080068c4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr

080068da <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068da:	b480      	push	{r7}
 80068dc:	b08d      	sub	sp, #52	; 0x34
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	4611      	mov	r1, r2
 80068e6:	461a      	mov	r2, r3
 80068e8:	460b      	mov	r3, r1
 80068ea:	80fb      	strh	r3, [r7, #6]
 80068ec:	4613      	mov	r3, r2
 80068ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068f0:	88bb      	ldrh	r3, [r7, #4]
 80068f2:	3301      	adds	r3, #1
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006900:	88fb      	ldrh	r3, [r7, #6]
 8006902:	005a      	lsls	r2, r3, #1
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006912:	e01e      	b.n	8006952 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	3301      	adds	r3, #1
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	b29b      	uxth	r3, r3
 800692a:	461a      	mov	r2, r3
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	b29a      	uxth	r2, r3
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	3302      	adds	r3, #2
 800693e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	3302      	adds	r3, #2
 8006944:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	3301      	adds	r3, #1
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	3b01      	subs	r3, #1
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1dd      	bne.n	8006914 <USB_WritePMA+0x3a>
  }
}
 8006958:	bf00      	nop
 800695a:	3734      	adds	r7, #52	; 0x34
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr

08006962 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006962:	b480      	push	{r7}
 8006964:	b08b      	sub	sp, #44	; 0x2c
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	4611      	mov	r1, r2
 800696e:	461a      	mov	r2, r3
 8006970:	460b      	mov	r3, r1
 8006972:	80fb      	strh	r3, [r7, #6]
 8006974:	4613      	mov	r3, r2
 8006976:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006978:	88bb      	ldrh	r3, [r7, #4]
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	b29b      	uxth	r3, r3
 800697e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	005a      	lsls	r2, r3, #1
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006994:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
 800699a:	e01b      	b.n	80069d4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	3302      	adds	r3, #2
 80069a8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	3301      	adds	r3, #1
 80069b6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	3301      	adds	r3, #1
 80069c6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	3302      	adds	r3, #2
 80069cc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	3b01      	subs	r3, #1
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e0      	bne.n	800699c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80069da:	88bb      	ldrh	r3, [r7, #4]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	701a      	strb	r2, [r3, #0]
  }
}
 80069f6:	bf00      	nop
 80069f8:	372c      	adds	r7, #44	; 0x2c
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr

08006a00 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8006a10:	2302      	movs	r3, #2
 8006a12:	2203      	movs	r2, #3
 8006a14:	2181      	movs	r1, #129	; 0x81
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fcf1 	bl	80083fe <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8006a22:	2302      	movs	r3, #2
 8006a24:	2203      	movs	r2, #3
 8006a26:	2101      	movs	r1, #1
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 fce8 	bl	80083fe <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8006a36:	201c      	movs	r0, #28
 8006a38:	f001 fdf6 	bl	8008628 <USBD_static_malloc>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	73fb      	strb	r3, [r7, #15]
 8006a52:	e011      	b.n	8006a78 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a5a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	761a      	strb	r2, [r3, #24]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	2305      	movs	r3, #5
 8006a70:	2101      	movs	r1, #1
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fdb4 	bl	80085e0 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006a8e:	2181      	movs	r1, #129	; 0x81
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fcda 	bl	800844a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fcd3 	bl	800844a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00e      	beq.n	8006ad4 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 fdba 	bl	8008640 <USBD_static_free>
    pdev->pClassData = NULL;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006af0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d051      	beq.n	8006bb2 <USBD_CUSTOM_HID_Setup+0xd2>
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	f040 80d8 	bne.w	8006cc4 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	3b02      	subs	r3, #2
 8006b1a:	2b09      	cmp	r3, #9
 8006b1c:	d841      	bhi.n	8006ba2 <USBD_CUSTOM_HID_Setup+0xc2>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <USBD_CUSTOM_HID_Setup+0x44>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b7d 	.word	0x08006b7d
 8006b28:	08006b5b 	.word	0x08006b5b
 8006b2c:	08006ba3 	.word	0x08006ba3
 8006b30:	08006ba3 	.word	0x08006ba3
 8006b34:	08006ba3 	.word	0x08006ba3
 8006b38:	08006ba3 	.word	0x08006ba3
 8006b3c:	08006ba3 	.word	0x08006ba3
 8006b40:	08006b8d 	.word	0x08006b8d
 8006b44:	08006b6b 	.word	0x08006b6b
 8006b48:	08006b4d 	.word	0x08006b4d
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	885b      	ldrh	r3, [r3, #2]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	609a      	str	r2, [r3, #8]
      break;
 8006b58:	e02a      	b.n	8006bb0 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	2201      	movs	r2, #1
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 f91a 	bl	8007d9c <USBD_CtlSendData>
      break;
 8006b68:	e022      	b.n	8006bb0 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	885b      	ldrh	r3, [r3, #2]
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	60da      	str	r2, [r3, #12]
      break;
 8006b7a:	e019      	b.n	8006bb0 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	330c      	adds	r3, #12
 8006b80:	2201      	movs	r2, #1
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 f909 	bl	8007d9c <USBD_CtlSendData>
      break;
 8006b8a:	e011      	b.n	8006bb0 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	615a      	str	r2, [r3, #20]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8006b92:	6939      	ldr	r1, [r7, #16]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	88db      	ldrh	r3, [r3, #6]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 f92c 	bl	8007df8 <USBD_CtlPrepareRx>
      break;
 8006ba0:	e006      	b.n	8006bb0 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f88f 	bl	8007cc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006baa:	2302      	movs	r3, #2
 8006bac:	75fb      	strb	r3, [r7, #23]
      break;
 8006bae:	bf00      	nop
    }
    break;
 8006bb0:	e08f      	b.n	8006cd2 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	785b      	ldrb	r3, [r3, #1]
 8006bb6:	2b0b      	cmp	r3, #11
 8006bb8:	d87c      	bhi.n	8006cb4 <USBD_CUSTOM_HID_Setup+0x1d4>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <USBD_CUSTOM_HID_Setup+0xe0>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bf1 	.word	0x08006bf1
 8006bc4:	08006cb5 	.word	0x08006cb5
 8006bc8:	08006cb5 	.word	0x08006cb5
 8006bcc:	08006cb5 	.word	0x08006cb5
 8006bd0:	08006cb5 	.word	0x08006cb5
 8006bd4:	08006cb5 	.word	0x08006cb5
 8006bd8:	08006c19 	.word	0x08006c19
 8006bdc:	08006cb5 	.word	0x08006cb5
 8006be0:	08006cb5 	.word	0x08006cb5
 8006be4:	08006cb5 	.word	0x08006cb5
 8006be8:	08006c67 	.word	0x08006c67
 8006bec:	08006c8f 	.word	0x08006c8f
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d107      	bne.n	8006c0a <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006bfa:	f107 030e 	add.w	r3, r7, #14
 8006bfe:	2202      	movs	r2, #2
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 f8ca 	bl	8007d9c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c08:	e05b      	b.n	8006cc2 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f85b 	bl	8007cc8 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c12:	2302      	movs	r3, #2
 8006c14:	75fb      	strb	r3, [r7, #23]
      break;
 8006c16:	e054      	b.n	8006cc2 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	885b      	ldrh	r3, [r3, #2]
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b22      	cmp	r3, #34	; 0x22
 8006c22:	d10b      	bne.n	8006c3c <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	88db      	ldrh	r3, [r3, #6]
 8006c28:	2b36      	cmp	r3, #54	; 0x36
 8006c2a:	bf28      	it	cs
 8006c2c:	2336      	movcs	r3, #54	; 0x36
 8006c2e:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	e00d      	b.n	8006c58 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	885b      	ldrh	r3, [r3, #2]
 8006c40:	0a1b      	lsrs	r3, r3, #8
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b21      	cmp	r3, #33	; 0x21
 8006c46:	d107      	bne.n	8006c58 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8006c48:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <USBD_CUSTOM_HID_Setup+0x1fc>)
 8006c4a:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	88db      	ldrh	r3, [r3, #6]
 8006c50:	2b09      	cmp	r3, #9
 8006c52:	bf28      	it	cs
 8006c54:	2309      	movcs	r3, #9
 8006c56:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 8006c58:	8bfb      	ldrh	r3, [r7, #30]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	69b9      	ldr	r1, [r7, #24]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 f89c 	bl	8007d9c <USBD_CtlSendData>
      break;
 8006c64:	e02d      	b.n	8006cc2 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d107      	bne.n	8006c80 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	3310      	adds	r3, #16
 8006c74:	2201      	movs	r2, #1
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 f88f 	bl	8007d9c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006c7e:	e020      	b.n	8006cc2 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 f820 	bl	8007cc8 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8c:	e019      	b.n	8006cc2 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d106      	bne.n	8006ca6 <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	885b      	ldrh	r3, [r3, #2]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	611a      	str	r2, [r3, #16]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006ca4:	e00d      	b.n	8006cc2 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 f80d 	bl	8007cc8 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb2:	e006      	b.n	8006cc2 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 f806 	bl	8007cc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	bf00      	nop
    }
    break;
 8006cc2:	e006      	b.n	8006cd2 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fffe 	bl	8007cc8 <USBD_CtlError>
    ret = USBD_FAIL;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	75fb      	strb	r3, [r7, #23]
    break;
 8006cd0:	bf00      	nop
  }
  return ret;
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	200000d4 	.word	0x200000d4

08006ce0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4613      	mov	r3, r2
 8006cec:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cf4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d10f      	bne.n	8006d20 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	7e1b      	ldrb	r3, [r3, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	761a      	strb	r2, [r3, #24]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8006d0e:	88fb      	ldrh	r3, [r7, #6]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	2181      	movs	r1, #129	; 0x81
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f001 fc40 	bl	800859a <USBD_LL_Transmit>
 8006d1a:	e001      	b.n	8006d20 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2229      	movs	r2, #41	; 0x29
 8006d38:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8006d3a:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000050 	.word	0x20000050

08006d4c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2229      	movs	r2, #41	; 0x29
 8006d58:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8006d5a:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	2000007c 	.word	0x2000007c

08006d6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2229      	movs	r2, #41	; 0x29
 8006d78:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8006d7a:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	200000a8 	.word	0x200000a8

08006d8c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006d9e:	2200      	movs	r2, #0
 8006da0:	761a      	strb	r2, [r3, #24]

  return USBD_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr

08006dae <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006dc0:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	7810      	ldrb	r0, [r2, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	7852      	ldrb	r2, [r2, #1]
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	2305      	movs	r3, #5
 8006dda:	2101      	movs	r1, #1
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fbff 	bl	80085e0 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006dfa:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d10c      	bne.n	8006e1e <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	7810      	ldrb	r0, [r2, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	7852      	ldrb	r2, [r2, #1]
 8006e14:	4611      	mov	r1, r2
 8006e16:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	615a      	str	r2, [r3, #20]
  }

  return USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	220a      	movs	r2, #10
 8006e34:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006e36:	4b03      	ldr	r3, [pc, #12]	; (8006e44 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	200000e0 	.word	0x200000e0

08006e48 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e52:	2302      	movs	r3, #2
 8006e54:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr

08006e74 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e01a      	b.n	8006ec2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	79fa      	ldrb	r2, [r7, #7]
 8006eb8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f001 fa34 	bl	8008328 <USBD_LL_Init>

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d006      	beq.n	8006eec <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
 8006eea:	e001      	b.n	8006ef0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006eec:	2302      	movs	r3, #2
 8006eee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr

08006efc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 fa5f 	bl	80083c8 <USBD_LL_Start>

  return USBD_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006f34:	2302      	movs	r3, #2
 8006f36:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00c      	beq.n	8006f5c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	78fa      	ldrb	r2, [r7, #3]
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
  return USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fe56 	bl	8007c50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d00c      	beq.n	8006fe2 <USBD_LL_SetupStage+0x56>
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d302      	bcc.n	8006fd2 <USBD_LL_SetupStage+0x46>
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d010      	beq.n	8006ff2 <USBD_LL_SetupStage+0x66>
 8006fd0:	e017      	b.n	8007002 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f9c6 	bl	800736c <USBD_StdDevReq>
    break;
 8006fe0:	e01a      	b.n	8007018 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa28 	bl	8007440 <USBD_StdItfReq>
    break;
 8006ff0:	e012      	b.n	8007018 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa66 	bl	80074cc <USBD_StdEPReq>
    break;
 8007000:	e00a      	b.n	8007018 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800700c:	b2db      	uxtb	r3, r3
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 fa39 	bl	8008488 <USBD_LL_StallEP>
    break;
 8007016:	bf00      	nop
  }

  return USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b086      	sub	sp, #24
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	460b      	mov	r3, r1
 800702c:	607a      	str	r2, [r7, #4]
 800702e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007030:	7afb      	ldrb	r3, [r7, #11]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d14b      	bne.n	80070ce <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800703c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007044:	2b03      	cmp	r3, #3
 8007046:	d134      	bne.n	80070b2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	68da      	ldr	r2, [r3, #12]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	429a      	cmp	r2, r3
 8007052:	d919      	bls.n	8007088 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	1ad2      	subs	r2, r2, r3
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800706a:	429a      	cmp	r2, r3
 800706c:	d203      	bcs.n	8007076 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007072:	b29b      	uxth	r3, r3
 8007074:	e002      	b.n	800707c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800707a:	b29b      	uxth	r3, r3
 800707c:	461a      	mov	r2, r3
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fed7 	bl	8007e34 <USBD_CtlContinueRx>
 8007086:	e038      	b.n	80070fa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00a      	beq.n	80070aa <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800709a:	2b03      	cmp	r3, #3
 800709c:	d105      	bne.n	80070aa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fed4 	bl	8007e58 <USBD_CtlSendStatus>
 80070b0:	e023      	b.n	80070fa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80070b8:	2b05      	cmp	r3, #5
 80070ba:	d11e      	bne.n	80070fa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80070c4:	2100      	movs	r1, #0
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f001 f9de 	bl	8008488 <USBD_LL_StallEP>
 80070cc:	e015      	b.n	80070fa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00d      	beq.n	80070f6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d108      	bne.n	80070f6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	7afa      	ldrb	r2, [r7, #11]
 80070ee:	4611      	mov	r1, r2
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	4798      	blx	r3
 80070f4:	e001      	b.n	80070fa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070f6:	2302      	movs	r3, #2
 80070f8:	e000      	b.n	80070fc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	460b      	mov	r3, r1
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007112:	7afb      	ldrb	r3, [r7, #11]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d17f      	bne.n	8007218 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3314      	adds	r3, #20
 800711c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007124:	2b02      	cmp	r3, #2
 8007126:	d15c      	bne.n	80071e2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	429a      	cmp	r2, r3
 8007132:	d915      	bls.n	8007160 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	1ad2      	subs	r2, r2, r3
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	b29b      	uxth	r3, r3
 8007148:	461a      	mov	r2, r3
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fe41 	bl	8007dd4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007152:	2300      	movs	r3, #0
 8007154:	2200      	movs	r2, #0
 8007156:	2100      	movs	r1, #0
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f001 fa41 	bl	80085e0 <USBD_LL_PrepareReceive>
 800715e:	e04e      	b.n	80071fe <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	6912      	ldr	r2, [r2, #16]
 8007168:	fbb3 f1f2 	udiv	r1, r3, r2
 800716c:	fb02 f201 	mul.w	r2, r2, r1
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d11c      	bne.n	80071b0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800717e:	429a      	cmp	r2, r3
 8007180:	d316      	bcc.n	80071b0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800718c:	429a      	cmp	r2, r3
 800718e:	d20f      	bcs.n	80071b0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007190:	2200      	movs	r2, #0
 8007192:	2100      	movs	r1, #0
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fe1d 	bl	8007dd4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80071a2:	2300      	movs	r3, #0
 80071a4:	2200      	movs	r2, #0
 80071a6:	2100      	movs	r1, #0
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f001 fa19 	bl	80085e0 <USBD_LL_PrepareReceive>
 80071ae:	e026      	b.n	80071fe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d105      	bne.n	80071d2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071d2:	2180      	movs	r1, #128	; 0x80
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f001 f957 	bl	8008488 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 fe4f 	bl	8007e7e <USBD_CtlReceiveStatus>
 80071e0:	e00d      	b.n	80071fe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d004      	beq.n	80071f6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d103      	bne.n	80071fe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071f6:	2180      	movs	r1, #128	; 0x80
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f001 f945 	bl	8008488 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007204:	2b01      	cmp	r3, #1
 8007206:	d11d      	bne.n	8007244 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f7ff fe83 	bl	8006f14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007216:	e015      	b.n	8007244 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00d      	beq.n	8007240 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800722a:	2b03      	cmp	r3, #3
 800722c:	d108      	bne.n	8007240 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	7afa      	ldrb	r2, [r7, #11]
 8007238:	4611      	mov	r1, r2
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	4798      	blx	r3
 800723e:	e001      	b.n	8007244 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007240:	2302      	movs	r3, #2
 8007242:	e000      	b.n	8007246 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007256:	2340      	movs	r3, #64	; 0x40
 8007258:	2200      	movs	r2, #0
 800725a:	2100      	movs	r1, #0
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 f8ce 	bl	80083fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2240      	movs	r2, #64	; 0x40
 800726e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007272:	2340      	movs	r3, #64	; 0x40
 8007274:	2200      	movs	r2, #0
 8007276:	2180      	movs	r1, #128	; 0x80
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f8c0 	bl	80083fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2240      	movs	r2, #64	; 0x40
 8007288:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6852      	ldr	r2, [r2, #4]
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	4611      	mov	r1, r2
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
  }

  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	78fa      	ldrb	r2, [r7, #3]
 80072e0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bc80      	pop	{r7}
 80072ec:	4770      	bx	lr

080072ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2204      	movs	r2, #4
 8007306:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr

08007316 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007316:	b480      	push	{r7}
 8007318:	b083      	sub	sp, #12
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	bc80      	pop	{r7}
 8007334:	4770      	bx	lr

08007336 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007344:	2b03      	cmp	r3, #3
 8007346:	d10b      	bne.n	8007360 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007382:	2b20      	cmp	r3, #32
 8007384:	d004      	beq.n	8007390 <USBD_StdDevReq+0x24>
 8007386:	2b40      	cmp	r3, #64	; 0x40
 8007388:	d002      	beq.n	8007390 <USBD_StdDevReq+0x24>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d008      	beq.n	80073a0 <USBD_StdDevReq+0x34>
 800738e:	e04c      	b.n	800742a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
    break;
 800739e:	e049      	b.n	8007434 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d83a      	bhi.n	800741e <USBD_StdDevReq+0xb2>
 80073a8:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <USBD_StdDevReq+0x44>)
 80073aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ae:	bf00      	nop
 80073b0:	08007401 	.word	0x08007401
 80073b4:	08007415 	.word	0x08007415
 80073b8:	0800741f 	.word	0x0800741f
 80073bc:	0800740b 	.word	0x0800740b
 80073c0:	0800741f 	.word	0x0800741f
 80073c4:	080073e3 	.word	0x080073e3
 80073c8:	080073d9 	.word	0x080073d9
 80073cc:	0800741f 	.word	0x0800741f
 80073d0:	080073f7 	.word	0x080073f7
 80073d4:	080073ed 	.word	0x080073ed
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f9d2 	bl	8007784 <USBD_GetDescriptor>
      break;
 80073e0:	e022      	b.n	8007428 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fac7 	bl	8007978 <USBD_SetAddress>
      break;
 80073ea:	e01d      	b.n	8007428 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fb04 	bl	80079fc <USBD_SetConfig>
      break;
 80073f4:	e018      	b.n	8007428 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fb8d 	bl	8007b18 <USBD_GetConfig>
      break;
 80073fe:	e013      	b.n	8007428 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fbbc 	bl	8007b80 <USBD_GetStatus>
      break;
 8007408:	e00e      	b.n	8007428 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fbea 	bl	8007be6 <USBD_SetFeature>
      break;
 8007412:	e009      	b.n	8007428 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fbf9 	bl	8007c0e <USBD_ClrFeature>
      break;
 800741c:	e004      	b.n	8007428 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fc51 	bl	8007cc8 <USBD_CtlError>
      break;
 8007426:	bf00      	nop
    }
    break;
 8007428:	e004      	b.n	8007434 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc4b 	bl	8007cc8 <USBD_CtlError>
    break;
 8007432:	bf00      	nop
  }

  return ret;
 8007434:	7bfb      	ldrb	r3, [r7, #15]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop

08007440 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007456:	2b20      	cmp	r3, #32
 8007458:	d003      	beq.n	8007462 <USBD_StdItfReq+0x22>
 800745a:	2b40      	cmp	r3, #64	; 0x40
 800745c:	d001      	beq.n	8007462 <USBD_StdItfReq+0x22>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d12a      	bne.n	80074b8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007468:	3b01      	subs	r3, #1
 800746a:	2b02      	cmp	r3, #2
 800746c:	d81d      	bhi.n	80074aa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	889b      	ldrh	r3, [r3, #4]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d813      	bhi.n	80074a0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	4798      	blx	r3
 8007486:	4603      	mov	r3, r0
 8007488:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	88db      	ldrh	r3, [r3, #6]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d110      	bne.n	80074b4 <USBD_StdItfReq+0x74>
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10d      	bne.n	80074b4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fcdd 	bl	8007e58 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800749e:	e009      	b.n	80074b4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fc10 	bl	8007cc8 <USBD_CtlError>
      break;
 80074a8:	e004      	b.n	80074b4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fc0b 	bl	8007cc8 <USBD_CtlError>
      break;
 80074b2:	e000      	b.n	80074b6 <USBD_StdItfReq+0x76>
      break;
 80074b4:	bf00      	nop
    }
    break;
 80074b6:	e004      	b.n	80074c2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fc04 	bl	8007cc8 <USBD_CtlError>
    break;
 80074c0:	bf00      	nop
  }

  return USBD_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	889b      	ldrh	r3, [r3, #4]
 80074de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d004      	beq.n	80074f6 <USBD_StdEPReq+0x2a>
 80074ec:	2b40      	cmp	r3, #64	; 0x40
 80074ee:	d002      	beq.n	80074f6 <USBD_StdEPReq+0x2a>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <USBD_StdEPReq+0x3a>
 80074f4:	e13b      	b.n	800776e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	4798      	blx	r3
    break;
 8007504:	e138      	b.n	8007778 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800750e:	2b20      	cmp	r3, #32
 8007510:	d10a      	bne.n	8007528 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	e128      	b.n	800777a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d03e      	beq.n	80075ae <USBD_StdEPReq+0xe2>
 8007530:	2b03      	cmp	r3, #3
 8007532:	d002      	beq.n	800753a <USBD_StdEPReq+0x6e>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d070      	beq.n	800761a <USBD_StdEPReq+0x14e>
 8007538:	e113      	b.n	8007762 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007540:	2b02      	cmp	r3, #2
 8007542:	d002      	beq.n	800754a <USBD_StdEPReq+0x7e>
 8007544:	2b03      	cmp	r3, #3
 8007546:	d015      	beq.n	8007574 <USBD_StdEPReq+0xa8>
 8007548:	e02b      	b.n	80075a2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00c      	beq.n	800756a <USBD_StdEPReq+0x9e>
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b80      	cmp	r3, #128	; 0x80
 8007554:	d009      	beq.n	800756a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 ff94 	bl	8008488 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007560:	2180      	movs	r1, #128	; 0x80
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 ff90 	bl	8008488 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007568:	e020      	b.n	80075ac <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fbab 	bl	8007cc8 <USBD_CtlError>
        break;
 8007572:	e01b      	b.n	80075ac <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10e      	bne.n	800759a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <USBD_StdEPReq+0xce>
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b80      	cmp	r3, #128	; 0x80
 8007586:	d008      	beq.n	800759a <USBD_StdEPReq+0xce>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	88db      	ldrh	r3, [r3, #6]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 ff77 	bl	8008488 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fc5c 	bl	8007e58 <USBD_CtlSendStatus>

        break;
 80075a0:	e004      	b.n	80075ac <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fb8f 	bl	8007cc8 <USBD_CtlError>
        break;
 80075aa:	bf00      	nop
      }
      break;
 80075ac:	e0de      	b.n	800776c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d002      	beq.n	80075be <USBD_StdEPReq+0xf2>
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d015      	beq.n	80075e8 <USBD_StdEPReq+0x11c>
 80075bc:	e026      	b.n	800760c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00c      	beq.n	80075de <USBD_StdEPReq+0x112>
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b80      	cmp	r3, #128	; 0x80
 80075c8:	d009      	beq.n	80075de <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 ff5a 	bl	8008488 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80075d4:	2180      	movs	r1, #128	; 0x80
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 ff56 	bl	8008488 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80075dc:	e01c      	b.n	8007618 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fb71 	bl	8007cc8 <USBD_CtlError>
        break;
 80075e6:	e017      	b.n	8007618 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	885b      	ldrh	r3, [r3, #2]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d112      	bne.n	8007616 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d004      	beq.n	8007604 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 ff61 	bl	80084c6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fc27 	bl	8007e58 <USBD_CtlSendStatus>
        }
        break;
 800760a:	e004      	b.n	8007616 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fb5a 	bl	8007cc8 <USBD_CtlError>
        break;
 8007614:	e000      	b.n	8007618 <USBD_StdEPReq+0x14c>
        break;
 8007616:	bf00      	nop
      }
      break;
 8007618:	e0a8      	b.n	800776c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007620:	2b02      	cmp	r3, #2
 8007622:	d002      	beq.n	800762a <USBD_StdEPReq+0x15e>
 8007624:	2b03      	cmp	r3, #3
 8007626:	d031      	beq.n	800768c <USBD_StdEPReq+0x1c0>
 8007628:	e095      	b.n	8007756 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <USBD_StdEPReq+0x174>
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b80      	cmp	r3, #128	; 0x80
 8007634:	d004      	beq.n	8007640 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fb45 	bl	8007cc8 <USBD_CtlError>
          break;
 800763e:	e08f      	b.n	8007760 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007640:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007644:	2b00      	cmp	r3, #0
 8007646:	da0b      	bge.n	8007660 <USBD_StdEPReq+0x194>
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	3310      	adds	r3, #16
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	4413      	add	r3, r2
 800765c:	3304      	adds	r3, #4
 800765e:	e00a      	b.n	8007676 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007666:	4613      	mov	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	4413      	add	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2202      	movs	r2, #2
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fb89 	bl	8007d9c <USBD_CtlSendData>
          break;
 800768a:	e069      	b.n	8007760 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800768c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007690:	2b00      	cmp	r3, #0
 8007692:	da11      	bge.n	80076b8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	f003 020f 	and.w	r2, r3, #15
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	3318      	adds	r3, #24
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d117      	bne.n	80076de <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fb09 	bl	8007cc8 <USBD_CtlError>
            break;
 80076b6:	e053      	b.n	8007760 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	f003 020f 	and.w	r2, r3, #15
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d104      	bne.n	80076de <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 faf6 	bl	8007cc8 <USBD_CtlError>
            break;
 80076dc:	e040      	b.n	8007760 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80076de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da0b      	bge.n	80076fe <USBD_StdEPReq+0x232>
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ec:	4613      	mov	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	3310      	adds	r3, #16
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	4413      	add	r3, r2
 80076fa:	3304      	adds	r3, #4
 80076fc:	e00a      	b.n	8007714 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007704:	4613      	mov	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	4413      	add	r3, r2
 8007714:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <USBD_StdEPReq+0x256>
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2b80      	cmp	r3, #128	; 0x80
 8007720:	d103      	bne.n	800772a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e00e      	b.n	8007748 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fee8 	bl	8008504 <USBD_LL_IsStallEP>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2201      	movs	r2, #1
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	e002      	b.n	8007748 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2202      	movs	r2, #2
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fb24 	bl	8007d9c <USBD_CtlSendData>
          break;
 8007754:	e004      	b.n	8007760 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fab5 	bl	8007cc8 <USBD_CtlError>
        break;
 800775e:	bf00      	nop
      }
      break;
 8007760:	e004      	b.n	800776c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 faaf 	bl	8007cc8 <USBD_CtlError>
      break;
 800776a:	bf00      	nop
    }
    break;
 800776c:	e004      	b.n	8007778 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 faa9 	bl	8007cc8 <USBD_CtlError>
    break;
 8007776:	bf00      	nop
  }

  return ret;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	885b      	ldrh	r3, [r3, #2]
 8007792:	0a1b      	lsrs	r3, r3, #8
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	2b06      	cmp	r3, #6
 800779a:	f200 80c9 	bhi.w	8007930 <USBD_GetDescriptor+0x1ac>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <USBD_GetDescriptor+0x20>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077c1 	.word	0x080077c1
 80077a8:	080077d9 	.word	0x080077d9
 80077ac:	08007819 	.word	0x08007819
 80077b0:	08007931 	.word	0x08007931
 80077b4:	08007931 	.word	0x08007931
 80077b8:	080078dd 	.word	0x080078dd
 80077bc:	08007903 	.word	0x08007903
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	7c12      	ldrb	r2, [r2, #16]
 80077cc:	f107 010a 	add.w	r1, r7, #10
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
 80077d4:	60f8      	str	r0, [r7, #12]
    break;
 80077d6:	e0b0      	b.n	800793a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	7c1b      	ldrb	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10d      	bne.n	80077fc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	f107 020a 	add.w	r2, r7, #10
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	2202      	movs	r2, #2
 80077f8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80077fa:	e09e      	b.n	800793a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	f107 020a 	add.w	r2, r7, #10
 8007808:	4610      	mov	r0, r2
 800780a:	4798      	blx	r3
 800780c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3301      	adds	r3, #1
 8007812:	2202      	movs	r2, #2
 8007814:	701a      	strb	r2, [r3, #0]
    break;
 8007816:	e090      	b.n	800793a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	885b      	ldrh	r3, [r3, #2]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b05      	cmp	r3, #5
 8007820:	d856      	bhi.n	80078d0 <USBD_GetDescriptor+0x14c>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <USBD_GetDescriptor+0xa4>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	08007841 	.word	0x08007841
 800782c:	08007859 	.word	0x08007859
 8007830:	08007871 	.word	0x08007871
 8007834:	08007889 	.word	0x08007889
 8007838:	080078a1 	.word	0x080078a1
 800783c:	080078b9 	.word	0x080078b9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	7c12      	ldrb	r2, [r2, #16]
 800784c:	f107 010a 	add.w	r1, r7, #10
 8007850:	4610      	mov	r0, r2
 8007852:	4798      	blx	r3
 8007854:	60f8      	str	r0, [r7, #12]
      break;
 8007856:	e040      	b.n	80078da <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	7c12      	ldrb	r2, [r2, #16]
 8007864:	f107 010a 	add.w	r1, r7, #10
 8007868:	4610      	mov	r0, r2
 800786a:	4798      	blx	r3
 800786c:	60f8      	str	r0, [r7, #12]
      break;
 800786e:	e034      	b.n	80078da <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	7c12      	ldrb	r2, [r2, #16]
 800787c:	f107 010a 	add.w	r1, r7, #10
 8007880:	4610      	mov	r0, r2
 8007882:	4798      	blx	r3
 8007884:	60f8      	str	r0, [r7, #12]
      break;
 8007886:	e028      	b.n	80078da <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	7c12      	ldrb	r2, [r2, #16]
 8007894:	f107 010a 	add.w	r1, r7, #10
 8007898:	4610      	mov	r0, r2
 800789a:	4798      	blx	r3
 800789c:	60f8      	str	r0, [r7, #12]
      break;
 800789e:	e01c      	b.n	80078da <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	7c12      	ldrb	r2, [r2, #16]
 80078ac:	f107 010a 	add.w	r1, r7, #10
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	60f8      	str	r0, [r7, #12]
      break;
 80078b6:	e010      	b.n	80078da <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	7c12      	ldrb	r2, [r2, #16]
 80078c4:	f107 010a 	add.w	r1, r7, #10
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
 80078cc:	60f8      	str	r0, [r7, #12]
      break;
 80078ce:	e004      	b.n	80078da <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f9f8 	bl	8007cc8 <USBD_CtlError>
      return;
 80078d8:	e04b      	b.n	8007972 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80078da:	e02e      	b.n	800793a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7c1b      	ldrb	r3, [r3, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d109      	bne.n	80078f8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ec:	f107 020a 	add.w	r2, r7, #10
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
      break;
 80078f6:	e020      	b.n	800793a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f9e4 	bl	8007cc8 <USBD_CtlError>
      return;
 8007900:	e037      	b.n	8007972 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7c1b      	ldrb	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10d      	bne.n	8007926 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007912:	f107 020a 	add.w	r2, r7, #10
 8007916:	4610      	mov	r0, r2
 8007918:	4798      	blx	r3
 800791a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3301      	adds	r3, #1
 8007920:	2207      	movs	r2, #7
 8007922:	701a      	strb	r2, [r3, #0]
      break;
 8007924:	e009      	b.n	800793a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f9cd 	bl	8007cc8 <USBD_CtlError>
      return;
 800792e:	e020      	b.n	8007972 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f9c8 	bl	8007cc8 <USBD_CtlError>
    return;
 8007938:	e01b      	b.n	8007972 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800793a:	897b      	ldrh	r3, [r7, #10]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d011      	beq.n	8007964 <USBD_GetDescriptor+0x1e0>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	88db      	ldrh	r3, [r3, #6]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00d      	beq.n	8007964 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	88da      	ldrh	r2, [r3, #6]
 800794c:	897b      	ldrh	r3, [r7, #10]
 800794e:	4293      	cmp	r3, r2
 8007950:	bf28      	it	cs
 8007952:	4613      	movcs	r3, r2
 8007954:	b29b      	uxth	r3, r3
 8007956:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007958:	897b      	ldrh	r3, [r7, #10]
 800795a:	461a      	mov	r2, r3
 800795c:	68f9      	ldr	r1, [r7, #12]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa1c 	bl	8007d9c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	88db      	ldrh	r3, [r3, #6]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fa73 	bl	8007e58 <USBD_CtlSendStatus>
  }
}
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	889b      	ldrh	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d130      	bne.n	80079ec <USBD_SetAddress+0x74>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	88db      	ldrh	r3, [r3, #6]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d12c      	bne.n	80079ec <USBD_SetAddress+0x74>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	885b      	ldrh	r3, [r3, #2]
 8007996:	2b7f      	cmp	r3, #127	; 0x7f
 8007998:	d828      	bhi.n	80079ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	885b      	ldrh	r3, [r3, #2]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d104      	bne.n	80079ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f988 	bl	8007cc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b8:	e01c      	b.n	80079f4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7bfa      	ldrb	r2, [r7, #15]
 80079be:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fdc8 	bl	800855c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fa43 	bl	8007e58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e0:	e008      	b.n	80079f4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ea:	e003      	b.n	80079f4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f96a 	bl	8007cc8 <USBD_CtlError>
  }
}
 80079f4:	bf00      	nop
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	885b      	ldrh	r3, [r3, #2]
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	4b41      	ldr	r3, [pc, #260]	; (8007b14 <USBD_SetConfig+0x118>)
 8007a0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a10:	4b40      	ldr	r3, [pc, #256]	; (8007b14 <USBD_SetConfig+0x118>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d904      	bls.n	8007a22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f954 	bl	8007cc8 <USBD_CtlError>
 8007a20:	e075      	b.n	8007b0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d002      	beq.n	8007a32 <USBD_SetConfig+0x36>
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d023      	beq.n	8007a78 <USBD_SetConfig+0x7c>
 8007a30:	e062      	b.n	8007af8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007a32:	4b38      	ldr	r3, [pc, #224]	; (8007b14 <USBD_SetConfig+0x118>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01a      	beq.n	8007a70 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007a3a:	4b36      	ldr	r3, [pc, #216]	; (8007b14 <USBD_SetConfig+0x118>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2203      	movs	r2, #3
 8007a48:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a4c:	4b31      	ldr	r3, [pc, #196]	; (8007b14 <USBD_SetConfig+0x118>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff fa68 	bl	8006f28 <USBD_SetClassConfig>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d104      	bne.n	8007a68 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f931 	bl	8007cc8 <USBD_CtlError>
          return;
 8007a66:	e052      	b.n	8007b0e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f9f5 	bl	8007e58 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007a6e:	e04e      	b.n	8007b0e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f9f1 	bl	8007e58 <USBD_CtlSendStatus>
      break;
 8007a76:	e04a      	b.n	8007b0e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a78:	4b26      	ldr	r3, [pc, #152]	; (8007b14 <USBD_SetConfig+0x118>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d112      	bne.n	8007aa6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007a88:	4b22      	ldr	r3, [pc, #136]	; (8007b14 <USBD_SetConfig+0x118>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a92:	4b20      	ldr	r3, [pc, #128]	; (8007b14 <USBD_SetConfig+0x118>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff fa64 	bl	8006f66 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f9da 	bl	8007e58 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007aa4:	e033      	b.n	8007b0e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007aa6:	4b1b      	ldr	r3, [pc, #108]	; (8007b14 <USBD_SetConfig+0x118>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d01d      	beq.n	8007af0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff fa52 	bl	8006f66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ac2:	4b14      	ldr	r3, [pc, #80]	; (8007b14 <USBD_SetConfig+0x118>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007acc:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <USBD_SetConfig+0x118>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fa28 	bl	8006f28 <USBD_SetClassConfig>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d104      	bne.n	8007ae8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f8f1 	bl	8007cc8 <USBD_CtlError>
          return;
 8007ae6:	e012      	b.n	8007b0e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f9b5 	bl	8007e58 <USBD_CtlSendStatus>
      break;
 8007aee:	e00e      	b.n	8007b0e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f9b1 	bl	8007e58 <USBD_CtlSendStatus>
      break;
 8007af6:	e00a      	b.n	8007b0e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f8e4 	bl	8007cc8 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007b00:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <USBD_SetConfig+0x118>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff fa2d 	bl	8006f66 <USBD_ClrClassConfig>
      break;
 8007b0c:	bf00      	nop
    }
  }
}
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	200001a8 	.word	0x200001a8

08007b18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	88db      	ldrh	r3, [r3, #6]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d004      	beq.n	8007b34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f8cb 	bl	8007cc8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007b32:	e021      	b.n	8007b78 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	db17      	blt.n	8007b6e <USBD_GetConfig+0x56>
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	dd02      	ble.n	8007b48 <USBD_GetConfig+0x30>
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d00b      	beq.n	8007b5e <USBD_GetConfig+0x46>
 8007b46:	e012      	b.n	8007b6e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3308      	adds	r3, #8
 8007b52:	2201      	movs	r2, #1
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f920 	bl	8007d9c <USBD_CtlSendData>
      break;
 8007b5c:	e00c      	b.n	8007b78 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	3304      	adds	r3, #4
 8007b62:	2201      	movs	r2, #1
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f918 	bl	8007d9c <USBD_CtlSendData>
      break;
 8007b6c:	e004      	b.n	8007b78 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f8a9 	bl	8007cc8 <USBD_CtlError>
      break;
 8007b76:	bf00      	nop
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b90:	3b01      	subs	r3, #1
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d81e      	bhi.n	8007bd4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	88db      	ldrh	r3, [r3, #6]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d004      	beq.n	8007ba8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f891 	bl	8007cc8 <USBD_CtlError>
      break;
 8007ba6:	e01a      	b.n	8007bde <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d005      	beq.n	8007bc4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f043 0202 	orr.w	r2, r3, #2
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	330c      	adds	r3, #12
 8007bc8:	2202      	movs	r2, #2
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f8e5 	bl	8007d9c <USBD_CtlSendData>
    break;
 8007bd2:	e004      	b.n	8007bde <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f876 	bl	8007cc8 <USBD_CtlError>
    break;
 8007bdc:	bf00      	nop
  }
}
 8007bde:	bf00      	nop
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	885b      	ldrh	r3, [r3, #2]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d106      	bne.n	8007c06 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f929 	bl	8007e58 <USBD_CtlSendStatus>
  }

}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d80b      	bhi.n	8007c3c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	885b      	ldrh	r3, [r3, #2]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d10c      	bne.n	8007c46 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f90f 	bl	8007e58 <USBD_CtlSendStatus>
    }
    break;
 8007c3a:	e004      	b.n	8007c46 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f842 	bl	8007cc8 <USBD_CtlError>
    break;
 8007c44:	e000      	b.n	8007c48 <USBD_ClrFeature+0x3a>
    break;
 8007c46:	bf00      	nop
  }
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781a      	ldrb	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	785a      	ldrb	r2, [r3, #1]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	3303      	adds	r3, #3
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	4413      	add	r3, r2
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	3305      	adds	r3, #5
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	021b      	lsls	r3, r3, #8
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	4413      	add	r3, r2
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	3306      	adds	r3, #6
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	3307      	adds	r3, #7
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4413      	add	r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	80da      	strh	r2, [r3, #6]

}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bc80      	pop	{r7}
 8007cc6:	4770      	bx	lr

08007cc8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007cd2:	2180      	movs	r1, #128	; 0x80
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fbd7 	bl	8008488 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007cda:	2100      	movs	r1, #0
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fbd3 	bl	8008488 <USBD_LL_StallEP>
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d032      	beq.n	8007d66 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 f834 	bl	8007d6e <USBD_GetLen>
 8007d06:	4603      	mov	r3, r0
 8007d08:	3301      	adds	r3, #1
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	75fa      	strb	r2, [r7, #23]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4413      	add	r3, r2
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	7812      	ldrb	r2, [r2, #0]
 8007d24:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	75fa      	strb	r2, [r7, #23]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	4413      	add	r3, r2
 8007d32:	2203      	movs	r2, #3
 8007d34:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d36:	e012      	b.n	8007d5e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	60fa      	str	r2, [r7, #12]
 8007d3e:	7dfa      	ldrb	r2, [r7, #23]
 8007d40:	1c51      	adds	r1, r2, #1
 8007d42:	75f9      	strb	r1, [r7, #23]
 8007d44:	4611      	mov	r1, r2
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	440a      	add	r2, r1
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	75fa      	strb	r2, [r7, #23]
 8007d54:	461a      	mov	r2, r3
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	4413      	add	r3, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e8      	bne.n	8007d38 <USBD_GetString+0x4e>
    }
  }
}
 8007d66:	bf00      	nop
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007d7a:	e005      	b.n	8007d88 <USBD_GetLen+0x1a>
    {
        len++;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3301      	adds	r3, #1
 8007d86:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1f5      	bne.n	8007d7c <USBD_GetLen+0xe>
    }

    return len;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr

08007d9c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	4613      	mov	r3, r2
 8007da8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2202      	movs	r2, #2
 8007dae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007db2:	88fa      	ldrh	r2, [r7, #6]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007db8:	88fa      	ldrh	r2, [r7, #6]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fbe8 	bl	800859a <USBD_LL_Transmit>

  return USBD_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007de2:	88fb      	ldrh	r3, [r7, #6]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	2100      	movs	r1, #0
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 fbd6 	bl	800859a <USBD_LL_Transmit>

  return USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2203      	movs	r2, #3
 8007e0a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007e16:	88fa      	ldrh	r2, [r7, #6]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007e1e:	88fb      	ldrh	r3, [r7, #6]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	2100      	movs	r1, #0
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fbdb 	bl	80085e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e42:	88fb      	ldrh	r3, [r7, #6]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	2100      	movs	r1, #0
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fbc9 	bl	80085e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2204      	movs	r2, #4
 8007e64:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fb93 	bl	800859a <USBD_LL_Transmit>

  return USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2205      	movs	r2, #5
 8007e8a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2200      	movs	r2, #0
 8007e92:	2100      	movs	r1, #0
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fba3 	bl	80085e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4912      	ldr	r1, [pc, #72]	; (8007ef4 <MX_USB_DEVICE_Init+0x50>)
 8007eac:	4812      	ldr	r0, [pc, #72]	; (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007eae:	f7fe ffe1 	bl	8006e74 <USBD_Init>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007eb8:	f7f8 fe88 	bl	8000bcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007ebc:	490f      	ldr	r1, [pc, #60]	; (8007efc <MX_USB_DEVICE_Init+0x58>)
 8007ebe:	480e      	ldr	r0, [pc, #56]	; (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007ec0:	f7ff f803 	bl	8006eca <USBD_RegisterClass>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007eca:	f7f8 fe7f 	bl	8000bcc <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007ece:	490c      	ldr	r1, [pc, #48]	; (8007f00 <MX_USB_DEVICE_Init+0x5c>)
 8007ed0:	4809      	ldr	r0, [pc, #36]	; (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007ed2:	f7fe ffb9 	bl	8006e48 <USBD_CUSTOM_HID_RegisterInterface>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007edc:	f7f8 fe76 	bl	8000bcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ee0:	4805      	ldr	r0, [pc, #20]	; (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007ee2:	f7ff f80b 	bl	8006efc <USBD_Start>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007eec:	f7f8 fe6e 	bl	8000bcc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ef0:	bf00      	nop
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20000134 	.word	0x20000134
 8007ef8:	200002dc 	.word	0x200002dc
 8007efc:	20000018 	.word	0x20000018
 8007f00:	20000124 	.word	0x20000124

08007f04 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bc80      	pop	{r7}
 8007f10:	4770      	bx	lr

08007f12 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007f12:	b480      	push	{r7}
 8007f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007f16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr

08007f20 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	460a      	mov	r2, r1
 8007f2a:	71fb      	strb	r3, [r7, #7]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007f30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr

08007f3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	6039      	str	r1, [r7, #0]
 8007f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2212      	movs	r2, #18
 8007f4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f4e:	4b03      	ldr	r3, [pc, #12]	; (8007f5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	20000150 	.word	0x20000150

08007f60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	6039      	str	r1, [r7, #0]
 8007f6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2204      	movs	r2, #4
 8007f70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f72:	4b03      	ldr	r3, [pc, #12]	; (8007f80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc80      	pop	{r7}
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	20000164 	.word	0x20000164

08007f84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	6039      	str	r1, [r7, #0]
 8007f8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d105      	bne.n	8007fa2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	4907      	ldr	r1, [pc, #28]	; (8007fb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f9a:	4808      	ldr	r0, [pc, #32]	; (8007fbc <USBD_FS_ProductStrDescriptor+0x38>)
 8007f9c:	f7ff fea5 	bl	8007cea <USBD_GetString>
 8007fa0:	e004      	b.n	8007fac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	4904      	ldr	r1, [pc, #16]	; (8007fb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fa6:	4805      	ldr	r0, [pc, #20]	; (8007fbc <USBD_FS_ProductStrDescriptor+0x38>)
 8007fa8:	f7ff fe9f 	bl	8007cea <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fac:	4b02      	ldr	r3, [pc, #8]	; (8007fb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000578 	.word	0x20000578
 8007fbc:	0800871c 	.word	0x0800871c

08007fc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	6039      	str	r1, [r7, #0]
 8007fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	4904      	ldr	r1, [pc, #16]	; (8007fe0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fd0:	4804      	ldr	r0, [pc, #16]	; (8007fe4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fd2:	f7ff fe8a 	bl	8007cea <USBD_GetString>
  return USBD_StrDesc;
 8007fd6:	4b02      	ldr	r3, [pc, #8]	; (8007fe0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20000578 	.word	0x20000578
 8007fe4:	08008728 	.word	0x08008728

08007fe8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6039      	str	r1, [r7, #0]
 8007ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	221a      	movs	r2, #26
 8007ff8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ffa:	f000 f843 	bl	8008084 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ffe:	4b02      	ldr	r3, [pc, #8]	; (8008008 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000168 	.word	0x20000168

0800800c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	6039      	str	r1, [r7, #0]
 8008016:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d105      	bne.n	800802a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	4907      	ldr	r1, [pc, #28]	; (8008040 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008022:	4808      	ldr	r0, [pc, #32]	; (8008044 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008024:	f7ff fe61 	bl	8007cea <USBD_GetString>
 8008028:	e004      	b.n	8008034 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	4904      	ldr	r1, [pc, #16]	; (8008040 <USBD_FS_ConfigStrDescriptor+0x34>)
 800802e:	4805      	ldr	r0, [pc, #20]	; (8008044 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008030:	f7ff fe5b 	bl	8007cea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008034:	4b02      	ldr	r3, [pc, #8]	; (8008040 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000578 	.word	0x20000578
 8008044:	0800872c 	.word	0x0800872c

08008048 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	6039      	str	r1, [r7, #0]
 8008052:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d105      	bne.n	8008066 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	4907      	ldr	r1, [pc, #28]	; (800807c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800805e:	4808      	ldr	r0, [pc, #32]	; (8008080 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008060:	f7ff fe43 	bl	8007cea <USBD_GetString>
 8008064:	e004      	b.n	8008070 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	4904      	ldr	r1, [pc, #16]	; (800807c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800806a:	4805      	ldr	r0, [pc, #20]	; (8008080 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800806c:	f7ff fe3d 	bl	8007cea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008070:	4b02      	ldr	r3, [pc, #8]	; (800807c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000578 	.word	0x20000578
 8008080:	08008740 	.word	0x08008740

08008084 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800808a:	4b0f      	ldr	r3, [pc, #60]	; (80080c8 <Get_SerialNum+0x44>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008090:	4b0e      	ldr	r3, [pc, #56]	; (80080cc <Get_SerialNum+0x48>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008096:	4b0e      	ldr	r3, [pc, #56]	; (80080d0 <Get_SerialNum+0x4c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4413      	add	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080aa:	2208      	movs	r2, #8
 80080ac:	4909      	ldr	r1, [pc, #36]	; (80080d4 <Get_SerialNum+0x50>)
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 f814 	bl	80080dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080b4:	2204      	movs	r2, #4
 80080b6:	4908      	ldr	r1, [pc, #32]	; (80080d8 <Get_SerialNum+0x54>)
 80080b8:	68b8      	ldr	r0, [r7, #8]
 80080ba:	f000 f80f 	bl	80080dc <IntToUnicode>
  }
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	1ff80050 	.word	0x1ff80050
 80080cc:	1ff80054 	.word	0x1ff80054
 80080d0:	1ff80058 	.word	0x1ff80058
 80080d4:	2000016a 	.word	0x2000016a
 80080d8:	2000017a 	.word	0x2000017a

080080dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4613      	mov	r3, r2
 80080e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]
 80080f2:	e027      	b.n	8008144 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	0f1b      	lsrs	r3, r3, #28
 80080f8:	2b09      	cmp	r3, #9
 80080fa:	d80b      	bhi.n	8008114 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	0f1b      	lsrs	r3, r3, #28
 8008100:	b2da      	uxtb	r2, r3
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	4619      	mov	r1, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	440b      	add	r3, r1
 800810c:	3230      	adds	r2, #48	; 0x30
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	e00a      	b.n	800812a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	0f1b      	lsrs	r3, r3, #28
 8008118:	b2da      	uxtb	r2, r3
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	4619      	mov	r1, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	440b      	add	r3, r1
 8008124:	3237      	adds	r2, #55	; 0x37
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	3301      	adds	r3, #1
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	4413      	add	r3, r2
 800813a:	2200      	movs	r2, #0
 800813c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	3301      	adds	r3, #1
 8008142:	75fb      	strb	r3, [r7, #23]
 8008144:	7dfa      	ldrb	r2, [r7, #23]
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	429a      	cmp	r2, r3
 800814a:	d3d3      	bcc.n	80080f4 <IntToUnicode+0x18>
  }
}
 800814c:	bf00      	nop
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	bc80      	pop	{r7}
 8008154:	4770      	bx	lr
	...

08008158 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d106      	bne.n	8008178 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800816a:	4b09      	ldr	r3, [pc, #36]	; (8008190 <HAL_PCDEx_SetConnectionState+0x38>)
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	4a08      	ldr	r2, [pc, #32]	; (8008190 <HAL_PCDEx_SetConnectionState+0x38>)
 8008170:	f043 0301 	orr.w	r3, r3, #1
 8008174:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8008176:	e005      	b.n	8008184 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8008178:	4b05      	ldr	r3, [pc, #20]	; (8008190 <HAL_PCDEx_SetConnectionState+0x38>)
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	4a04      	ldr	r2, [pc, #16]	; (8008190 <HAL_PCDEx_SetConnectionState+0x38>)
 800817e:	f023 0301 	bic.w	r3, r3, #1
 8008182:	6053      	str	r3, [r2, #4]
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	bc80      	pop	{r7}
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	40010000 	.word	0x40010000

08008194 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <HAL_PCD_MspInit+0x54>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d11b      	bne.n	80081de <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80081a6:	4b11      	ldr	r3, [pc, #68]	; (80081ec <HAL_PCD_MspInit+0x58>)
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	4a10      	ldr	r2, [pc, #64]	; (80081ec <HAL_PCD_MspInit+0x58>)
 80081ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081b0:	6253      	str	r3, [r2, #36]	; 0x24
 80081b2:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <HAL_PCD_MspInit+0x58>)
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 1, 0);
 80081be:	2200      	movs	r2, #0
 80081c0:	2101      	movs	r1, #1
 80081c2:	2013      	movs	r0, #19
 80081c4:	f7f9 fc0f 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 80081c8:	2013      	movs	r0, #19
 80081ca:	f7f9 fc28 	bl	8001a1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 80081ce:	2200      	movs	r2, #0
 80081d0:	2101      	movs	r1, #1
 80081d2:	2014      	movs	r0, #20
 80081d4:	f7f9 fc07 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80081d8:	2014      	movs	r0, #20
 80081da:	f7f9 fc20 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80081de:	bf00      	nop
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	40005c00 	.word	0x40005c00
 80081ec:	40023800 	.word	0x40023800

080081f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fe fec0 	bl	8006f8c <USBD_LL_SetupStage>
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	440b      	add	r3, r1
 8008234:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	4619      	mov	r1, r3
 800823e:	f7fe fef0 	bl	8007022 <USBD_LL_DataOutStage>
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	440b      	add	r3, r1
 800826a:	333c      	adds	r3, #60	; 0x3c
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	4619      	mov	r1, r3
 8008272:	f7fe ff47 	bl	8007104 <USBD_LL_DataInStage>
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff f852 	bl	8007336 <USBD_LL_SOF>
}
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082a2:	2301      	movs	r3, #1
 80082a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d001      	beq.n	80082b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082ae:	f7f8 fc8d 	bl	8000bcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082b8:	7bfa      	ldrb	r2, [r7, #15]
 80082ba:	4611      	mov	r1, r2
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff f807 	bl	80072d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe ffc0 	bl	800724e <USBD_LL_Reset>
}
 80082ce:	bf00      	nop
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff f801 	bl	80072ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082f4:	4b04      	ldr	r3, [pc, #16]	; (8008308 <HAL_PCD_SuspendCallback+0x30>)
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	4a03      	ldr	r2, [pc, #12]	; (8008308 <HAL_PCD_SuspendCallback+0x30>)
 80082fa:	f043 0306 	orr.w	r3, r3, #6
 80082fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	e000ed00 	.word	0xe000ed00

0800830c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fffb 	bl	8007316 <USBD_LL_Resume>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008330:	4a23      	ldr	r2, [pc, #140]	; (80083c0 <USBD_LL_Init+0x98>)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a21      	ldr	r2, [pc, #132]	; (80083c0 <USBD_LL_Init+0x98>)
 800833c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8008340:	4b1f      	ldr	r3, [pc, #124]	; (80083c0 <USBD_LL_Init+0x98>)
 8008342:	4a20      	ldr	r2, [pc, #128]	; (80083c4 <USBD_LL_Init+0x9c>)
 8008344:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008346:	4b1e      	ldr	r3, [pc, #120]	; (80083c0 <USBD_LL_Init+0x98>)
 8008348:	2208      	movs	r2, #8
 800834a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800834c:	4b1c      	ldr	r3, [pc, #112]	; (80083c0 <USBD_LL_Init+0x98>)
 800834e:	2202      	movs	r2, #2
 8008350:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008352:	4b1b      	ldr	r3, [pc, #108]	; (80083c0 <USBD_LL_Init+0x98>)
 8008354:	2202      	movs	r2, #2
 8008356:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008358:	4b19      	ldr	r3, [pc, #100]	; (80083c0 <USBD_LL_Init+0x98>)
 800835a:	2200      	movs	r2, #0
 800835c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800835e:	4b18      	ldr	r3, [pc, #96]	; (80083c0 <USBD_LL_Init+0x98>)
 8008360:	2200      	movs	r2, #0
 8008362:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008364:	4816      	ldr	r0, [pc, #88]	; (80083c0 <USBD_LL_Init+0x98>)
 8008366:	f7f9 fec7 	bl	80020f8 <HAL_PCD_Init>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008370:	f7f8 fc2c 	bl	8000bcc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800837a:	2318      	movs	r3, #24
 800837c:	2200      	movs	r2, #0
 800837e:	2100      	movs	r1, #0
 8008380:	f7fb f959 	bl	8003636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800838a:	2358      	movs	r3, #88	; 0x58
 800838c:	2200      	movs	r2, #0
 800838e:	2180      	movs	r1, #128	; 0x80
 8008390:	f7fb f951 	bl	8003636 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800839a:	2398      	movs	r3, #152	; 0x98
 800839c:	2200      	movs	r2, #0
 800839e:	2181      	movs	r1, #129	; 0x81
 80083a0:	f7fb f949 	bl	8003636 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80083aa:	23d8      	movs	r3, #216	; 0xd8
 80083ac:	2200      	movs	r2, #0
 80083ae:	2101      	movs	r1, #1
 80083b0:	f7fb f941 	bl	8003636 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20000778 	.word	0x20000778
 80083c4:	40005c00 	.word	0x40005c00

080083c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80083de:	4618      	mov	r0, r3
 80083e0:	f7f9 ff68 	bl	80022b4 <HAL_PCD_Start>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f932 	bl	8008654 <USBD_Get_USB_Status>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	4608      	mov	r0, r1
 8008408:	4611      	mov	r1, r2
 800840a:	461a      	mov	r2, r3
 800840c:	4603      	mov	r3, r0
 800840e:	70fb      	strb	r3, [r7, #3]
 8008410:	460b      	mov	r3, r1
 8008412:	70bb      	strb	r3, [r7, #2]
 8008414:	4613      	mov	r3, r2
 8008416:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008426:	78bb      	ldrb	r3, [r7, #2]
 8008428:	883a      	ldrh	r2, [r7, #0]
 800842a:	78f9      	ldrb	r1, [r7, #3]
 800842c:	f7fa f884 	bl	8002538 <HAL_PCD_EP_Open>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	4618      	mov	r0, r3
 8008438:	f000 f90c 	bl	8008654 <USBD_Get_USB_Status>
 800843c:	4603      	mov	r3, r0
 800843e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008440:	7bbb      	ldrb	r3, [r7, #14]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008464:	78fa      	ldrb	r2, [r7, #3]
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f7fa f8cb 	bl	8002604 <HAL_PCD_EP_Close>
 800846e:	4603      	mov	r3, r0
 8008470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f8ed 	bl	8008654 <USBD_Get_USB_Status>
 800847a:	4603      	mov	r3, r0
 800847c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800847e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80084a2:	78fa      	ldrb	r2, [r7, #3]
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fa f974 	bl	8002794 <HAL_PCD_EP_SetStall>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f8ce 	bl	8008654 <USBD_Get_USB_Status>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80084e0:	78fa      	ldrb	r2, [r7, #3]
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fa f9b5 	bl	8002854 <HAL_PCD_EP_ClrStall>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 f8af 	bl	8008654 <USBD_Get_USB_Status>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008516:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800851c:	2b00      	cmp	r3, #0
 800851e:	da0c      	bge.n	800853a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008520:	78fb      	ldrb	r3, [r7, #3]
 8008522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	440b      	add	r3, r1
 8008534:	3302      	adds	r3, #2
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	e00b      	b.n	8008552 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008540:	68f9      	ldr	r1, [r7, #12]
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	440b      	add	r3, r1
 800854c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008550:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr

0800855c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008576:	78fa      	ldrb	r2, [r7, #3]
 8008578:	4611      	mov	r1, r2
 800857a:	4618      	mov	r0, r3
 800857c:	f7f9 ffb7 	bl	80024ee <HAL_PCD_SetAddress>
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f864 	bl	8008654 <USBD_Get_USB_Status>
 800858c:	4603      	mov	r3, r0
 800858e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008590:	7bbb      	ldrb	r3, [r7, #14]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b086      	sub	sp, #24
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	461a      	mov	r2, r3
 80085a6:	460b      	mov	r3, r1
 80085a8:	72fb      	strb	r3, [r7, #11]
 80085aa:	4613      	mov	r3, r2
 80085ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085bc:	893b      	ldrh	r3, [r7, #8]
 80085be:	7af9      	ldrb	r1, [r7, #11]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	f7fa f8a4 	bl	800270e <HAL_PCD_EP_Transmit>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 f841 	bl	8008654 <USBD_Get_USB_Status>
 80085d2:	4603      	mov	r3, r0
 80085d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	607a      	str	r2, [r7, #4]
 80085ea:	461a      	mov	r2, r3
 80085ec:	460b      	mov	r3, r1
 80085ee:	72fb      	strb	r3, [r7, #11]
 80085f0:	4613      	mov	r3, r2
 80085f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008602:	893b      	ldrh	r3, [r7, #8]
 8008604:	7af9      	ldrb	r1, [r7, #11]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	f7fa f844 	bl	8002694 <HAL_PCD_EP_Receive>
 800860c:	4603      	mov	r3, r0
 800860e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008610:	7dfb      	ldrb	r3, [r7, #23]
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f81e 	bl	8008654 <USBD_Get_USB_Status>
 8008618:	4603      	mov	r3, r0
 800861a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800861c:	7dbb      	ldrb	r3, [r7, #22]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <USBD_static_malloc+0x14>)
}
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	bc80      	pop	{r7}
 800863a:	4770      	bx	lr
 800863c:	200001ac 	.word	0x200001ac

08008640 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]

}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr
	...

08008654 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	2b03      	cmp	r3, #3
 8008666:	d817      	bhi.n	8008698 <USBD_Get_USB_Status+0x44>
 8008668:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <USBD_Get_USB_Status+0x1c>)
 800866a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866e:	bf00      	nop
 8008670:	08008681 	.word	0x08008681
 8008674:	08008687 	.word	0x08008687
 8008678:	0800868d 	.word	0x0800868d
 800867c:	08008693 	.word	0x08008693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
    break;
 8008684:	e00b      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008686:	2302      	movs	r3, #2
 8008688:	73fb      	strb	r3, [r7, #15]
    break;
 800868a:	e008      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800868c:	2301      	movs	r3, #1
 800868e:	73fb      	strb	r3, [r7, #15]
    break;
 8008690:	e005      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008692:	2302      	movs	r3, #2
 8008694:	73fb      	strb	r3, [r7, #15]
    break;
 8008696:	e002      	b.n	800869e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008698:	2302      	movs	r3, #2
 800869a:	73fb      	strb	r3, [r7, #15]
    break;
 800869c:	bf00      	nop
  }
  return usb_status;
 800869e:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	2500      	movs	r5, #0
 80086b0:	4e0c      	ldr	r6, [pc, #48]	; (80086e4 <__libc_init_array+0x38>)
 80086b2:	4c0d      	ldr	r4, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b4:	1ba4      	subs	r4, r4, r6
 80086b6:	10a4      	asrs	r4, r4, #2
 80086b8:	42a5      	cmp	r5, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	f000 f822 	bl	8008704 <_init>
 80086c0:	2500      	movs	r5, #0
 80086c2:	4e0a      	ldr	r6, [pc, #40]	; (80086ec <__libc_init_array+0x40>)
 80086c4:	4c0a      	ldr	r4, [pc, #40]	; (80086f0 <__libc_init_array+0x44>)
 80086c6:	1ba4      	subs	r4, r4, r6
 80086c8:	10a4      	asrs	r4, r4, #2
 80086ca:	42a5      	cmp	r5, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086d4:	4798      	blx	r3
 80086d6:	3501      	adds	r5, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086de:	4798      	blx	r3
 80086e0:	3501      	adds	r5, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	0800877c 	.word	0x0800877c
 80086e8:	0800877c 	.word	0x0800877c
 80086ec:	0800877c 	.word	0x0800877c
 80086f0:	08008780 	.word	0x08008780

080086f4 <memset>:
 80086f4:	4603      	mov	r3, r0
 80086f6:	4402      	add	r2, r0
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d100      	bne.n	80086fe <memset+0xa>
 80086fc:	4770      	bx	lr
 80086fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008702:	e7f9      	b.n	80086f8 <memset+0x4>

08008704 <_init>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr

08008710 <_fini>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	bf00      	nop
 8008714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008716:	bc08      	pop	{r3}
 8008718:	469e      	mov	lr, r3
 800871a:	4770      	bx	lr
